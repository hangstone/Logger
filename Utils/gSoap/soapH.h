/* soapH.h
   Generated by gSOAP 2.8.17r from Markisa.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap*, const char*, void*, size_t, int, int, size_t, unsigned int);

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_byte(soap, data),0) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_int(soap, data),0) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


/* _hangpacs__CommandStation is a typedef element/attribute synonym for CommandStation */

#ifndef SOAP_TYPE__hangpacs__CommandStation
#define SOAP_TYPE__hangpacs__CommandStation (64)
#endif

#define soap_default__hangpacs__CommandStation(soap, a) soap_default_CommandStation(soap, a)


#define soap_out__hangpacs__CommandStation soap_out_CommandStation


#define soap_in__hangpacs__CommandStation soap_in_CommandStation


#define soap_put__hangpacs__CommandStation soap_put_CommandStation


#define soap_get__hangpacs__CommandStation soap_get_CommandStation


#ifndef SOAP_TYPE_CommandStation
#define SOAP_TYPE_CommandStation (63)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_CommandStation(struct soap*, enum CommandStation *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_CommandStation(struct soap*, const char*, int, const enum CommandStation *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_CommandStation2s(struct soap*, enum CommandStation);
SOAP_FMAC3 enum CommandStation * SOAP_FMAC4 soap_in_CommandStation(struct soap*, const char*, enum CommandStation *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2CommandStation(struct soap*, const char*, enum CommandStation *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_CommandStation(struct soap*, const enum CommandStation *, const char*, const char*);

#ifndef soap_write_CommandStation
#define soap_write_CommandStation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_CommandStation(soap, data),0) || soap_put_CommandStation(soap, data, "CommandStation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum CommandStation * SOAP_FMAC4 soap_get_CommandStation(struct soap*, enum CommandStation *, const char*, const char*);

#ifndef soap_read_CommandStation
#define soap_read_CommandStation(soap, data) ( soap_begin_recv(soap) || !soap_get_CommandStation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_bool
#define SOAP_TYPE_bool (16)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap*, bool *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

#ifndef soap_write_bool
#define soap_write_bool(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_bool(soap, data),0) || soap_put_bool(soap, data, "boolean", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

#ifndef soap_read_bool
#define soap_read_bool(soap, data) ( soap_begin_recv(soap) || !soap_get_bool(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


/* _hangpacs__Processing is a typedef element/attribute synonym for Processing */

#ifndef SOAP_TYPE__hangpacs__Processing
#define SOAP_TYPE__hangpacs__Processing (10)
#endif

#define soap_default__hangpacs__Processing(soap, a) soap_default_Processing(soap, a)


#define soap_out__hangpacs__Processing soap_out_Processing


#define soap_in__hangpacs__Processing soap_in_Processing


#define soap_put__hangpacs__Processing soap_put_Processing


#define soap_get__hangpacs__Processing soap_get_Processing


#ifndef SOAP_TYPE_Processing
#define SOAP_TYPE_Processing (9)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_Processing(struct soap*, enum Processing *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_Processing(struct soap*, const char*, int, const enum Processing *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_Processing2s(struct soap*, enum Processing);
SOAP_FMAC3 enum Processing * SOAP_FMAC4 soap_in_Processing(struct soap*, const char*, enum Processing *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2Processing(struct soap*, const char*, enum Processing *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Processing(struct soap*, const enum Processing *, const char*, const char*);

#ifndef soap_write_Processing
#define soap_write_Processing(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_Processing(soap, data),0) || soap_put_Processing(soap, data, "Processing", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum Processing * SOAP_FMAC4 soap_get_Processing(struct soap*, enum Processing *, const char*, const char*);

#ifndef soap_read_Processing
#define soap_read_Processing(soap, data) ( soap_begin_recv(soap) || !soap_get_Processing(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__fsres__CFindStationResponse
#define SOAP_TYPE__fsres__CFindStationResponse (60)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__fsres__CFindStationResponse(struct soap*, const char*, int, const _fsres__CFindStationResponse *, const char*);
SOAP_FMAC3 _fsres__CFindStationResponse * SOAP_FMAC4 soap_in__fsres__CFindStationResponse(struct soap*, const char*, _fsres__CFindStationResponse *, const char*);

#ifndef soap_write__fsres__CFindStationResponse
#define soap_write__fsres__CFindStationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fsres:CFindStationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _fsres__CFindStationResponse * SOAP_FMAC4 soap_get__fsres__CFindStationResponse(struct soap*, _fsres__CFindStationResponse *, const char*, const char*);

#ifndef soap_read__fsres__CFindStationResponse
#define soap_read__fsres__CFindStationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__fsres__CFindStationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _fsres__CFindStationResponse * SOAP_FMAC2 soap_instantiate__fsres__CFindStationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _fsres__CFindStationResponse * soap_new__fsres__CFindStationResponse(struct soap *soap, int n = -1) { return soap_instantiate__fsres__CFindStationResponse(soap, n, NULL, NULL, NULL); }

inline _fsres__CFindStationResponse * soap_new_req__fsres__CFindStationResponse(struct soap *soap) { _fsres__CFindStationResponse *_p = soap_instantiate__fsres__CFindStationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _fsres__CFindStationResponse * soap_new_set__fsres__CFindStationResponse(struct soap *soap, std::list<struct FindStationResponse >& m_listResponse) { _fsres__CFindStationResponse *_p = soap_instantiate__fsres__CFindStationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_fsres__CFindStationResponse::m_listResponse = m_listResponse; } return _p; }

inline void soap_delete__fsres__CFindStationResponse(struct soap *soap, _fsres__CFindStationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__fsres__CFindStationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__rlres__CReadLogResponse
#define SOAP_TYPE__rlres__CReadLogResponse (52)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__rlres__CReadLogResponse(struct soap*, const char*, int, const _rlres__CReadLogResponse *, const char*);
SOAP_FMAC3 _rlres__CReadLogResponse * SOAP_FMAC4 soap_in__rlres__CReadLogResponse(struct soap*, const char*, _rlres__CReadLogResponse *, const char*);

#ifndef soap_write__rlres__CReadLogResponse
#define soap_write__rlres__CReadLogResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "rlres:CReadLogResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _rlres__CReadLogResponse * SOAP_FMAC4 soap_get__rlres__CReadLogResponse(struct soap*, _rlres__CReadLogResponse *, const char*, const char*);

#ifndef soap_read__rlres__CReadLogResponse
#define soap_read__rlres__CReadLogResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__rlres__CReadLogResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _rlres__CReadLogResponse * SOAP_FMAC2 soap_instantiate__rlres__CReadLogResponse(struct soap*, int, const char*, const char*, size_t*);

inline _rlres__CReadLogResponse * soap_new__rlres__CReadLogResponse(struct soap *soap, int n = -1) { return soap_instantiate__rlres__CReadLogResponse(soap, n, NULL, NULL, NULL); }

inline _rlres__CReadLogResponse * soap_new_req__rlres__CReadLogResponse(struct soap *soap) { _rlres__CReadLogResponse *_p = soap_instantiate__rlres__CReadLogResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _rlres__CReadLogResponse * soap_new_set__rlres__CReadLogResponse(struct soap *soap, std::list<struct ReadLogResponse >& m_listResponse) { _rlres__CReadLogResponse *_p = soap_instantiate__rlres__CReadLogResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_rlres__CReadLogResponse::m_listResponse = m_listResponse; } return _p; }

inline void soap_delete__rlres__CReadLogResponse(struct soap *soap, _rlres__CReadLogResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__rlres__CReadLogResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__rres__CReadResponse
#define SOAP_TYPE__rres__CReadResponse (25)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__rres__CReadResponse(struct soap*, const char*, int, const _rres__CReadResponse *, const char*);
SOAP_FMAC3 _rres__CReadResponse * SOAP_FMAC4 soap_in__rres__CReadResponse(struct soap*, const char*, _rres__CReadResponse *, const char*);

#ifndef soap_write__rres__CReadResponse
#define soap_write__rres__CReadResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "rres:CReadResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _rres__CReadResponse * SOAP_FMAC4 soap_get__rres__CReadResponse(struct soap*, _rres__CReadResponse *, const char*, const char*);

#ifndef soap_read__rres__CReadResponse
#define soap_read__rres__CReadResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__rres__CReadResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _rres__CReadResponse * SOAP_FMAC2 soap_instantiate__rres__CReadResponse(struct soap*, int, const char*, const char*, size_t*);

inline _rres__CReadResponse * soap_new__rres__CReadResponse(struct soap *soap, int n = -1) { return soap_instantiate__rres__CReadResponse(soap, n, NULL, NULL, NULL); }

inline _rres__CReadResponse * soap_new_req__rres__CReadResponse(struct soap *soap) { _rres__CReadResponse *_p = soap_instantiate__rres__CReadResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _rres__CReadResponse * soap_new_set__rres__CReadResponse(struct soap *soap, std::list<struct ReadResponse >& m_listResponse) { _rres__CReadResponse *_p = soap_instantiate__rres__CReadResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_rres__CReadResponse::m_listResponse = m_listResponse; } return _p; }

inline void soap_delete__rres__CReadResponse(struct soap *soap, _rres__CReadResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__rres__CReadResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__wstring
#define SOAP_TYPE_std__wstring (12)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__wstring(struct soap*, std::wstring *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__wstring(struct soap*, const std::wstring *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__wstring(struct soap*, const char*, int, const std::wstring*, const char*);
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_std__wstring(struct soap*, const char*, std::wstring*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__wstring(struct soap*, const std::wstring *, const char*, const char*);

#ifndef soap_write_std__wstring
#define soap_write_std__wstring(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_std__wstring(soap, data),0) || soap_put_std__wstring(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_std__wstring(struct soap*, std::wstring *, const char*, const char*);

#ifndef soap_read_std__wstring
#define soap_read_std__wstring(soap, data) ( soap_begin_recv(soap) || !soap_get_std__wstring(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 std::wstring * SOAP_FMAC2 soap_instantiate_std__wstring(struct soap*, int, const char*, const char*, size_t*);

inline std::wstring * soap_new_std__wstring(struct soap *soap, int n = -1) { return soap_instantiate_std__wstring(soap, n, NULL, NULL, NULL); }

inline std::wstring * soap_new_req_std__wstring(struct soap *soap) { std::wstring *_p = soap_instantiate_std__wstring(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__wstring(soap, _p); } return _p; }

inline std::wstring * soap_new_set_std__wstring(struct soap *soap) { std::wstring *_p = soap_instantiate_std__wstring(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__wstring(soap, _p); } return _p; }

inline void soap_delete_std__wstring(struct soap *soap, std::wstring *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__wstring(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (104)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, data),0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (103)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, data),0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (101)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, data),0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (99)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, data),0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (98)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, data),0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE_hangpacs__CommandStation
#define SOAP_TYPE_hangpacs__CommandStation (97)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_hangpacs__CommandStation(struct soap*, struct hangpacs__CommandStation *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_hangpacs__CommandStation(struct soap*, const struct hangpacs__CommandStation *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_hangpacs__CommandStation(struct soap*, const char*, int, const struct hangpacs__CommandStation *, const char*);
SOAP_FMAC3 struct hangpacs__CommandStation * SOAP_FMAC4 soap_in_hangpacs__CommandStation(struct soap*, const char*, struct hangpacs__CommandStation *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_hangpacs__CommandStation(struct soap*, const struct hangpacs__CommandStation *, const char*, const char*);

#ifndef soap_write_hangpacs__CommandStation
#define soap_write_hangpacs__CommandStation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_hangpacs__CommandStation(soap, data),0) || soap_put_hangpacs__CommandStation(soap, data, "hangpacs:CommandStation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct hangpacs__CommandStation * SOAP_FMAC4 soap_get_hangpacs__CommandStation(struct soap*, struct hangpacs__CommandStation *, const char*, const char*);

#ifndef soap_read_hangpacs__CommandStation
#define soap_read_hangpacs__CommandStation(soap, data) ( soap_begin_recv(soap) || !soap_get_hangpacs__CommandStation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct hangpacs__CommandStation * SOAP_FMAC2 soap_instantiate_hangpacs__CommandStation(struct soap*, int, const char*, const char*, size_t*);

inline struct hangpacs__CommandStation * soap_new_hangpacs__CommandStation(struct soap *soap, int n = -1) { return soap_instantiate_hangpacs__CommandStation(soap, n, NULL, NULL, NULL); }

inline struct hangpacs__CommandStation * soap_new_req_hangpacs__CommandStation(struct soap *soap, struct csreq__CommandStationRequest& stReqMsg) { struct hangpacs__CommandStation *_p = soap_instantiate_hangpacs__CommandStation(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_hangpacs__CommandStation(soap, _p); _p->stReqMsg = stReqMsg; } return _p; }

inline struct hangpacs__CommandStation * soap_new_set_hangpacs__CommandStation(struct soap *soap, struct csreq__CommandStationRequest& stReqMsg) { struct hangpacs__CommandStation *_p = soap_instantiate_hangpacs__CommandStation(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_hangpacs__CommandStation(soap, _p); _p->stReqMsg = stReqMsg; } return _p; }

inline void soap_delete_hangpacs__CommandStation(struct soap *soap, struct hangpacs__CommandStation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_hangpacs__CommandStation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_hangpacs__FindStation
#define SOAP_TYPE_hangpacs__FindStation (94)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_hangpacs__FindStation(struct soap*, struct hangpacs__FindStation *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_hangpacs__FindStation(struct soap*, const struct hangpacs__FindStation *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_hangpacs__FindStation(struct soap*, const char*, int, const struct hangpacs__FindStation *, const char*);
SOAP_FMAC3 struct hangpacs__FindStation * SOAP_FMAC4 soap_in_hangpacs__FindStation(struct soap*, const char*, struct hangpacs__FindStation *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_hangpacs__FindStation(struct soap*, const struct hangpacs__FindStation *, const char*, const char*);

#ifndef soap_write_hangpacs__FindStation
#define soap_write_hangpacs__FindStation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_hangpacs__FindStation(soap, data),0) || soap_put_hangpacs__FindStation(soap, data, "hangpacs:FindStation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct hangpacs__FindStation * SOAP_FMAC4 soap_get_hangpacs__FindStation(struct soap*, struct hangpacs__FindStation *, const char*, const char*);

#ifndef soap_read_hangpacs__FindStation
#define soap_read_hangpacs__FindStation(soap, data) ( soap_begin_recv(soap) || !soap_get_hangpacs__FindStation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct hangpacs__FindStation * SOAP_FMAC2 soap_instantiate_hangpacs__FindStation(struct soap*, int, const char*, const char*, size_t*);

inline struct hangpacs__FindStation * soap_new_hangpacs__FindStation(struct soap *soap, int n = -1) { return soap_instantiate_hangpacs__FindStation(soap, n, NULL, NULL, NULL); }

inline struct hangpacs__FindStation * soap_new_req_hangpacs__FindStation(struct soap *soap, struct fsreq__FindStationRequest& stReqMsg) { struct hangpacs__FindStation *_p = soap_instantiate_hangpacs__FindStation(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_hangpacs__FindStation(soap, _p); _p->stReqMsg = stReqMsg; } return _p; }

inline struct hangpacs__FindStation * soap_new_set_hangpacs__FindStation(struct soap *soap, struct fsreq__FindStationRequest& stReqMsg) { struct hangpacs__FindStation *_p = soap_instantiate_hangpacs__FindStation(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_hangpacs__FindStation(soap, _p); _p->stReqMsg = stReqMsg; } return _p; }

inline void soap_delete_hangpacs__FindStation(struct soap *soap, struct hangpacs__FindStation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_hangpacs__FindStation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_hangpacs__ReadLog
#define SOAP_TYPE_hangpacs__ReadLog (91)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_hangpacs__ReadLog(struct soap*, struct hangpacs__ReadLog *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_hangpacs__ReadLog(struct soap*, const struct hangpacs__ReadLog *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_hangpacs__ReadLog(struct soap*, const char*, int, const struct hangpacs__ReadLog *, const char*);
SOAP_FMAC3 struct hangpacs__ReadLog * SOAP_FMAC4 soap_in_hangpacs__ReadLog(struct soap*, const char*, struct hangpacs__ReadLog *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_hangpacs__ReadLog(struct soap*, const struct hangpacs__ReadLog *, const char*, const char*);

#ifndef soap_write_hangpacs__ReadLog
#define soap_write_hangpacs__ReadLog(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_hangpacs__ReadLog(soap, data),0) || soap_put_hangpacs__ReadLog(soap, data, "hangpacs:ReadLog", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct hangpacs__ReadLog * SOAP_FMAC4 soap_get_hangpacs__ReadLog(struct soap*, struct hangpacs__ReadLog *, const char*, const char*);

#ifndef soap_read_hangpacs__ReadLog
#define soap_read_hangpacs__ReadLog(soap, data) ( soap_begin_recv(soap) || !soap_get_hangpacs__ReadLog(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct hangpacs__ReadLog * SOAP_FMAC2 soap_instantiate_hangpacs__ReadLog(struct soap*, int, const char*, const char*, size_t*);

inline struct hangpacs__ReadLog * soap_new_hangpacs__ReadLog(struct soap *soap, int n = -1) { return soap_instantiate_hangpacs__ReadLog(soap, n, NULL, NULL, NULL); }

inline struct hangpacs__ReadLog * soap_new_req_hangpacs__ReadLog(struct soap *soap, struct rlreq__ReadLogRequest& stReqMsg) { struct hangpacs__ReadLog *_p = soap_instantiate_hangpacs__ReadLog(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_hangpacs__ReadLog(soap, _p); _p->stReqMsg = stReqMsg; } return _p; }

inline struct hangpacs__ReadLog * soap_new_set_hangpacs__ReadLog(struct soap *soap, struct rlreq__ReadLogRequest& stReqMsg) { struct hangpacs__ReadLog *_p = soap_instantiate_hangpacs__ReadLog(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_hangpacs__ReadLog(soap, _p); _p->stReqMsg = stReqMsg; } return _p; }

inline void soap_delete_hangpacs__ReadLog(struct soap *soap, struct hangpacs__ReadLog *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_hangpacs__ReadLog(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_hangpacs__WriteLogAsync
#define SOAP_TYPE_hangpacs__WriteLogAsync (88)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_hangpacs__WriteLogAsync(struct soap*, struct hangpacs__WriteLogAsync *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_hangpacs__WriteLogAsync(struct soap*, const struct hangpacs__WriteLogAsync *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_hangpacs__WriteLogAsync(struct soap*, const char*, int, const struct hangpacs__WriteLogAsync *, const char*);
SOAP_FMAC3 struct hangpacs__WriteLogAsync * SOAP_FMAC4 soap_in_hangpacs__WriteLogAsync(struct soap*, const char*, struct hangpacs__WriteLogAsync *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_hangpacs__WriteLogAsync(struct soap*, const struct hangpacs__WriteLogAsync *, const char*, const char*);

#ifndef soap_write_hangpacs__WriteLogAsync
#define soap_write_hangpacs__WriteLogAsync(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_hangpacs__WriteLogAsync(soap, data),0) || soap_put_hangpacs__WriteLogAsync(soap, data, "hangpacs:WriteLogAsync", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct hangpacs__WriteLogAsync * SOAP_FMAC4 soap_get_hangpacs__WriteLogAsync(struct soap*, struct hangpacs__WriteLogAsync *, const char*, const char*);

#ifndef soap_read_hangpacs__WriteLogAsync
#define soap_read_hangpacs__WriteLogAsync(soap, data) ( soap_begin_recv(soap) || !soap_get_hangpacs__WriteLogAsync(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct hangpacs__WriteLogAsync * SOAP_FMAC2 soap_instantiate_hangpacs__WriteLogAsync(struct soap*, int, const char*, const char*, size_t*);

inline struct hangpacs__WriteLogAsync * soap_new_hangpacs__WriteLogAsync(struct soap *soap, int n = -1) { return soap_instantiate_hangpacs__WriteLogAsync(soap, n, NULL, NULL, NULL); }

inline struct hangpacs__WriteLogAsync * soap_new_req_hangpacs__WriteLogAsync(struct soap *soap, struct wlreq__WriteLogRequest& stReqMsg) { struct hangpacs__WriteLogAsync *_p = soap_instantiate_hangpacs__WriteLogAsync(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_hangpacs__WriteLogAsync(soap, _p); _p->stReqMsg = stReqMsg; } return _p; }

inline struct hangpacs__WriteLogAsync * soap_new_set_hangpacs__WriteLogAsync(struct soap *soap, struct wlreq__WriteLogRequest& stReqMsg) { struct hangpacs__WriteLogAsync *_p = soap_instantiate_hangpacs__WriteLogAsync(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_hangpacs__WriteLogAsync(soap, _p); _p->stReqMsg = stReqMsg; } return _p; }

inline void soap_delete_hangpacs__WriteLogAsync(struct soap *soap, struct hangpacs__WriteLogAsync *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_hangpacs__WriteLogAsync(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_hangpacs__WriteLog
#define SOAP_TYPE_hangpacs__WriteLog (85)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_hangpacs__WriteLog(struct soap*, struct hangpacs__WriteLog *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_hangpacs__WriteLog(struct soap*, const struct hangpacs__WriteLog *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_hangpacs__WriteLog(struct soap*, const char*, int, const struct hangpacs__WriteLog *, const char*);
SOAP_FMAC3 struct hangpacs__WriteLog * SOAP_FMAC4 soap_in_hangpacs__WriteLog(struct soap*, const char*, struct hangpacs__WriteLog *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_hangpacs__WriteLog(struct soap*, const struct hangpacs__WriteLog *, const char*, const char*);

#ifndef soap_write_hangpacs__WriteLog
#define soap_write_hangpacs__WriteLog(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_hangpacs__WriteLog(soap, data),0) || soap_put_hangpacs__WriteLog(soap, data, "hangpacs:WriteLog", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct hangpacs__WriteLog * SOAP_FMAC4 soap_get_hangpacs__WriteLog(struct soap*, struct hangpacs__WriteLog *, const char*, const char*);

#ifndef soap_read_hangpacs__WriteLog
#define soap_read_hangpacs__WriteLog(soap, data) ( soap_begin_recv(soap) || !soap_get_hangpacs__WriteLog(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct hangpacs__WriteLog * SOAP_FMAC2 soap_instantiate_hangpacs__WriteLog(struct soap*, int, const char*, const char*, size_t*);

inline struct hangpacs__WriteLog * soap_new_hangpacs__WriteLog(struct soap *soap, int n = -1) { return soap_instantiate_hangpacs__WriteLog(soap, n, NULL, NULL, NULL); }

inline struct hangpacs__WriteLog * soap_new_req_hangpacs__WriteLog(struct soap *soap, struct wlreq__WriteLogRequest& stReqMsg) { struct hangpacs__WriteLog *_p = soap_instantiate_hangpacs__WriteLog(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_hangpacs__WriteLog(soap, _p); _p->stReqMsg = stReqMsg; } return _p; }

inline struct hangpacs__WriteLog * soap_new_set_hangpacs__WriteLog(struct soap *soap, struct wlreq__WriteLogRequest& stReqMsg) { struct hangpacs__WriteLog *_p = soap_instantiate_hangpacs__WriteLog(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_hangpacs__WriteLog(soap, _p); _p->stReqMsg = stReqMsg; } return _p; }

inline void soap_delete_hangpacs__WriteLog(struct soap *soap, struct hangpacs__WriteLog *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_hangpacs__WriteLog(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_hangpacs__FindReceiver
#define SOAP_TYPE_hangpacs__FindReceiver (82)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_hangpacs__FindReceiver(struct soap*, struct hangpacs__FindReceiver *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_hangpacs__FindReceiver(struct soap*, const struct hangpacs__FindReceiver *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_hangpacs__FindReceiver(struct soap*, const char*, int, const struct hangpacs__FindReceiver *, const char*);
SOAP_FMAC3 struct hangpacs__FindReceiver * SOAP_FMAC4 soap_in_hangpacs__FindReceiver(struct soap*, const char*, struct hangpacs__FindReceiver *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_hangpacs__FindReceiver(struct soap*, const struct hangpacs__FindReceiver *, const char*, const char*);

#ifndef soap_write_hangpacs__FindReceiver
#define soap_write_hangpacs__FindReceiver(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_hangpacs__FindReceiver(soap, data),0) || soap_put_hangpacs__FindReceiver(soap, data, "hangpacs:FindReceiver", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct hangpacs__FindReceiver * SOAP_FMAC4 soap_get_hangpacs__FindReceiver(struct soap*, struct hangpacs__FindReceiver *, const char*, const char*);

#ifndef soap_read_hangpacs__FindReceiver
#define soap_read_hangpacs__FindReceiver(soap, data) ( soap_begin_recv(soap) || !soap_get_hangpacs__FindReceiver(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct hangpacs__FindReceiver * SOAP_FMAC2 soap_instantiate_hangpacs__FindReceiver(struct soap*, int, const char*, const char*, size_t*);

inline struct hangpacs__FindReceiver * soap_new_hangpacs__FindReceiver(struct soap *soap, int n = -1) { return soap_instantiate_hangpacs__FindReceiver(soap, n, NULL, NULL, NULL); }

inline struct hangpacs__FindReceiver * soap_new_req_hangpacs__FindReceiver(struct soap *soap, struct frreq__FindReceiverRequest& stReqMsg) { struct hangpacs__FindReceiver *_p = soap_instantiate_hangpacs__FindReceiver(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_hangpacs__FindReceiver(soap, _p); _p->stReqMsg = stReqMsg; } return _p; }

inline struct hangpacs__FindReceiver * soap_new_set_hangpacs__FindReceiver(struct soap *soap, struct frreq__FindReceiverRequest& stReqMsg) { struct hangpacs__FindReceiver *_p = soap_instantiate_hangpacs__FindReceiver(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_hangpacs__FindReceiver(soap, _p); _p->stReqMsg = stReqMsg; } return _p; }

inline void soap_delete_hangpacs__FindReceiver(struct soap *soap, struct hangpacs__FindReceiver *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_hangpacs__FindReceiver(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_hangpacs__RefreshRequest
#define SOAP_TYPE_hangpacs__RefreshRequest (79)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_hangpacs__RefreshRequest(struct soap*, struct hangpacs__RefreshRequest *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_hangpacs__RefreshRequest(struct soap*, const struct hangpacs__RefreshRequest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_hangpacs__RefreshRequest(struct soap*, const char*, int, const struct hangpacs__RefreshRequest *, const char*);
SOAP_FMAC3 struct hangpacs__RefreshRequest * SOAP_FMAC4 soap_in_hangpacs__RefreshRequest(struct soap*, const char*, struct hangpacs__RefreshRequest *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_hangpacs__RefreshRequest(struct soap*, const struct hangpacs__RefreshRequest *, const char*, const char*);

#ifndef soap_write_hangpacs__RefreshRequest
#define soap_write_hangpacs__RefreshRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_hangpacs__RefreshRequest(soap, data),0) || soap_put_hangpacs__RefreshRequest(soap, data, "hangpacs:RefreshRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct hangpacs__RefreshRequest * SOAP_FMAC4 soap_get_hangpacs__RefreshRequest(struct soap*, struct hangpacs__RefreshRequest *, const char*, const char*);

#ifndef soap_read_hangpacs__RefreshRequest
#define soap_read_hangpacs__RefreshRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_hangpacs__RefreshRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct hangpacs__RefreshRequest * SOAP_FMAC2 soap_instantiate_hangpacs__RefreshRequest(struct soap*, int, const char*, const char*, size_t*);

inline struct hangpacs__RefreshRequest * soap_new_hangpacs__RefreshRequest(struct soap *soap, int n = -1) { return soap_instantiate_hangpacs__RefreshRequest(soap, n, NULL, NULL, NULL); }

inline struct hangpacs__RefreshRequest * soap_new_req_hangpacs__RefreshRequest(struct soap *soap, struct rreq__RefreshRequest& stReqMsg) { struct hangpacs__RefreshRequest *_p = soap_instantiate_hangpacs__RefreshRequest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_hangpacs__RefreshRequest(soap, _p); _p->stReqMsg = stReqMsg; } return _p; }

inline struct hangpacs__RefreshRequest * soap_new_set_hangpacs__RefreshRequest(struct soap *soap, struct rreq__RefreshRequest& stReqMsg) { struct hangpacs__RefreshRequest *_p = soap_instantiate_hangpacs__RefreshRequest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_hangpacs__RefreshRequest(soap, _p); _p->stReqMsg = stReqMsg; } return _p; }

inline void soap_delete_hangpacs__RefreshRequest(struct soap *soap, struct hangpacs__RefreshRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_hangpacs__RefreshRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_hangpacs__ReadRequest
#define SOAP_TYPE_hangpacs__ReadRequest (76)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_hangpacs__ReadRequest(struct soap*, struct hangpacs__ReadRequest *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_hangpacs__ReadRequest(struct soap*, const struct hangpacs__ReadRequest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_hangpacs__ReadRequest(struct soap*, const char*, int, const struct hangpacs__ReadRequest *, const char*);
SOAP_FMAC3 struct hangpacs__ReadRequest * SOAP_FMAC4 soap_in_hangpacs__ReadRequest(struct soap*, const char*, struct hangpacs__ReadRequest *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_hangpacs__ReadRequest(struct soap*, const struct hangpacs__ReadRequest *, const char*, const char*);

#ifndef soap_write_hangpacs__ReadRequest
#define soap_write_hangpacs__ReadRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_hangpacs__ReadRequest(soap, data),0) || soap_put_hangpacs__ReadRequest(soap, data, "hangpacs:ReadRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct hangpacs__ReadRequest * SOAP_FMAC4 soap_get_hangpacs__ReadRequest(struct soap*, struct hangpacs__ReadRequest *, const char*, const char*);

#ifndef soap_read_hangpacs__ReadRequest
#define soap_read_hangpacs__ReadRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_hangpacs__ReadRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct hangpacs__ReadRequest * SOAP_FMAC2 soap_instantiate_hangpacs__ReadRequest(struct soap*, int, const char*, const char*, size_t*);

inline struct hangpacs__ReadRequest * soap_new_hangpacs__ReadRequest(struct soap *soap, int n = -1) { return soap_instantiate_hangpacs__ReadRequest(soap, n, NULL, NULL, NULL); }

inline struct hangpacs__ReadRequest * soap_new_req_hangpacs__ReadRequest(struct soap *soap, struct rreq__ReadRequest& stReqMsg) { struct hangpacs__ReadRequest *_p = soap_instantiate_hangpacs__ReadRequest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_hangpacs__ReadRequest(soap, _p); _p->stReqMsg = stReqMsg; } return _p; }

inline struct hangpacs__ReadRequest * soap_new_set_hangpacs__ReadRequest(struct soap *soap, struct rreq__ReadRequest& stReqMsg) { struct hangpacs__ReadRequest *_p = soap_instantiate_hangpacs__ReadRequest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_hangpacs__ReadRequest(soap, _p); _p->stReqMsg = stReqMsg; } return _p; }

inline void soap_delete_hangpacs__ReadRequest(struct soap *soap, struct hangpacs__ReadRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_hangpacs__ReadRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_hangpacs__WriteRequest
#define SOAP_TYPE_hangpacs__WriteRequest (73)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_hangpacs__WriteRequest(struct soap*, struct hangpacs__WriteRequest *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_hangpacs__WriteRequest(struct soap*, const struct hangpacs__WriteRequest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_hangpacs__WriteRequest(struct soap*, const char*, int, const struct hangpacs__WriteRequest *, const char*);
SOAP_FMAC3 struct hangpacs__WriteRequest * SOAP_FMAC4 soap_in_hangpacs__WriteRequest(struct soap*, const char*, struct hangpacs__WriteRequest *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_hangpacs__WriteRequest(struct soap*, const struct hangpacs__WriteRequest *, const char*, const char*);

#ifndef soap_write_hangpacs__WriteRequest
#define soap_write_hangpacs__WriteRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_hangpacs__WriteRequest(soap, data),0) || soap_put_hangpacs__WriteRequest(soap, data, "hangpacs:WriteRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct hangpacs__WriteRequest * SOAP_FMAC4 soap_get_hangpacs__WriteRequest(struct soap*, struct hangpacs__WriteRequest *, const char*, const char*);

#ifndef soap_read_hangpacs__WriteRequest
#define soap_read_hangpacs__WriteRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_hangpacs__WriteRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct hangpacs__WriteRequest * SOAP_FMAC2 soap_instantiate_hangpacs__WriteRequest(struct soap*, int, const char*, const char*, size_t*);

inline struct hangpacs__WriteRequest * soap_new_hangpacs__WriteRequest(struct soap *soap, int n = -1) { return soap_instantiate_hangpacs__WriteRequest(soap, n, NULL, NULL, NULL); }

inline struct hangpacs__WriteRequest * soap_new_req_hangpacs__WriteRequest(struct soap *soap, struct wreq__WriteRequest& stReqMsg) { struct hangpacs__WriteRequest *_p = soap_instantiate_hangpacs__WriteRequest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_hangpacs__WriteRequest(soap, _p); _p->stReqMsg = stReqMsg; } return _p; }

inline struct hangpacs__WriteRequest * soap_new_set_hangpacs__WriteRequest(struct soap *soap, struct wreq__WriteRequest& stReqMsg) { struct hangpacs__WriteRequest *_p = soap_instantiate_hangpacs__WriteRequest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_hangpacs__WriteRequest(soap, _p); _p->stReqMsg = stReqMsg; } return _p; }

inline void soap_delete_hangpacs__WriteRequest(struct soap *soap, struct hangpacs__WriteRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_hangpacs__WriteRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_csres__CommandStationResponse
#define SOAP_TYPE_csres__CommandStationResponse (70)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_csres__CommandStationResponse(struct soap*, struct csres__CommandStationResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_csres__CommandStationResponse(struct soap*, const struct csres__CommandStationResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_csres__CommandStationResponse(struct soap*, const char*, int, const struct csres__CommandStationResponse *, const char*);
SOAP_FMAC3 struct csres__CommandStationResponse * SOAP_FMAC4 soap_in_csres__CommandStationResponse(struct soap*, const char*, struct csres__CommandStationResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_csres__CommandStationResponse(struct soap*, const struct csres__CommandStationResponse *, const char*, const char*);

#ifndef soap_write_csres__CommandStationResponse
#define soap_write_csres__CommandStationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_csres__CommandStationResponse(soap, data),0) || soap_put_csres__CommandStationResponse(soap, data, "csres:CommandStationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct csres__CommandStationResponse * SOAP_FMAC4 soap_get_csres__CommandStationResponse(struct soap*, struct csres__CommandStationResponse *, const char*, const char*);

#ifndef soap_read_csres__CommandStationResponse
#define soap_read_csres__CommandStationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_csres__CommandStationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct csres__CommandStationResponse * SOAP_FMAC2 soap_instantiate_csres__CommandStationResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct csres__CommandStationResponse * soap_new_csres__CommandStationResponse(struct soap *soap, int n = -1) { return soap_instantiate_csres__CommandStationResponse(soap, n, NULL, NULL, NULL); }

inline struct csres__CommandStationResponse * soap_new_req_csres__CommandStationResponse(struct soap *soap, struct CommandStationResponse& return_) { struct csres__CommandStationResponse *_p = soap_instantiate_csres__CommandStationResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_csres__CommandStationResponse(soap, _p); _p->return_ = return_; } return _p; }

inline struct csres__CommandStationResponse * soap_new_set_csres__CommandStationResponse(struct soap *soap, struct CommandStationResponse& return_) { struct csres__CommandStationResponse *_p = soap_instantiate_csres__CommandStationResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_csres__CommandStationResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_csres__CommandStationResponse(struct soap *soap, struct csres__CommandStationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_csres__CommandStationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

/* _csres_CommandStationResponse is a typedef element/attribute synonym for CommandStationResponse */

#ifndef SOAP_TYPE__csres_CommandStationResponse
#define SOAP_TYPE__csres_CommandStationResponse (69)
#endif

#define soap_default__csres_CommandStationResponse(soap, a) soap_default_CommandStationResponse(soap, a)


#define soap_serialize__csres_CommandStationResponse soap_serialize_CommandStationResponse


#define soap_out__csres_CommandStationResponse soap_out_CommandStationResponse


#define soap_in__csres_CommandStationResponse soap_in_CommandStationResponse


#define soap_put__csres_CommandStationResponse soap_put_CommandStationResponse


#define soap_get__csres_CommandStationResponse soap_get_CommandStationResponse


#define soap_instantiate__csres_CommandStationResponse soap_instantiate_CommandStationResponse


#define soap_copy__csres_CommandStationResponse soap_copy_CommandStationResponse

#ifndef SOAP_TYPE_CommandStationResponse
#define SOAP_TYPE_CommandStationResponse (68)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_CommandStationResponse(struct soap*, struct CommandStationResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_CommandStationResponse(struct soap*, const struct CommandStationResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_CommandStationResponse(struct soap*, const char*, int, const struct CommandStationResponse *, const char*);
SOAP_FMAC3 struct CommandStationResponse * SOAP_FMAC4 soap_in_CommandStationResponse(struct soap*, const char*, struct CommandStationResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_CommandStationResponse(struct soap*, const struct CommandStationResponse *, const char*, const char*);

#ifndef soap_write_CommandStationResponse
#define soap_write_CommandStationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_CommandStationResponse(soap, data),0) || soap_put_CommandStationResponse(soap, data, "CommandStationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct CommandStationResponse * SOAP_FMAC4 soap_get_CommandStationResponse(struct soap*, struct CommandStationResponse *, const char*, const char*);

#ifndef soap_read_CommandStationResponse
#define soap_read_CommandStationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_CommandStationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct CommandStationResponse * SOAP_FMAC2 soap_instantiate_CommandStationResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct CommandStationResponse * soap_new_CommandStationResponse(struct soap *soap, int n = -1) { return soap_instantiate_CommandStationResponse(soap, n, NULL, NULL, NULL); }

inline struct CommandStationResponse * soap_new_req_CommandStationResponse(struct soap *soap, bool bDummy) { struct CommandStationResponse *_p = soap_instantiate_CommandStationResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_CommandStationResponse(soap, _p); _p->bDummy = bDummy; } return _p; }

inline struct CommandStationResponse * soap_new_set_CommandStationResponse(struct soap *soap, bool bDummy) { struct CommandStationResponse *_p = soap_instantiate_CommandStationResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_CommandStationResponse(soap, _p); _p->bDummy = bDummy; } return _p; }

inline void soap_delete_CommandStationResponse(struct soap *soap, struct CommandStationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_CommandStationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_csreq__CommandStationRequest
#define SOAP_TYPE_csreq__CommandStationRequest (67)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_csreq__CommandStationRequest(struct soap*, struct csreq__CommandStationRequest *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_csreq__CommandStationRequest(struct soap*, const struct csreq__CommandStationRequest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_csreq__CommandStationRequest(struct soap*, const char*, int, const struct csreq__CommandStationRequest *, const char*);
SOAP_FMAC3 struct csreq__CommandStationRequest * SOAP_FMAC4 soap_in_csreq__CommandStationRequest(struct soap*, const char*, struct csreq__CommandStationRequest *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_csreq__CommandStationRequest(struct soap*, const struct csreq__CommandStationRequest *, const char*, const char*);

#ifndef soap_write_csreq__CommandStationRequest
#define soap_write_csreq__CommandStationRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_csreq__CommandStationRequest(soap, data),0) || soap_put_csreq__CommandStationRequest(soap, data, "csreq:CommandStationRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct csreq__CommandStationRequest * SOAP_FMAC4 soap_get_csreq__CommandStationRequest(struct soap*, struct csreq__CommandStationRequest *, const char*, const char*);

#ifndef soap_read_csreq__CommandStationRequest
#define soap_read_csreq__CommandStationRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_csreq__CommandStationRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct csreq__CommandStationRequest * SOAP_FMAC2 soap_instantiate_csreq__CommandStationRequest(struct soap*, int, const char*, const char*, size_t*);

inline struct csreq__CommandStationRequest * soap_new_csreq__CommandStationRequest(struct soap *soap, int n = -1) { return soap_instantiate_csreq__CommandStationRequest(soap, n, NULL, NULL, NULL); }

inline struct csreq__CommandStationRequest * soap_new_req_csreq__CommandStationRequest(struct soap *soap, struct CommandStationRequest& retrun_) { struct csreq__CommandStationRequest *_p = soap_instantiate_csreq__CommandStationRequest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_csreq__CommandStationRequest(soap, _p); _p->retrun_ = retrun_; } return _p; }

inline struct csreq__CommandStationRequest * soap_new_set_csreq__CommandStationRequest(struct soap *soap, struct CommandStationRequest& retrun_) { struct csreq__CommandStationRequest *_p = soap_instantiate_csreq__CommandStationRequest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_csreq__CommandStationRequest(soap, _p); _p->retrun_ = retrun_; } return _p; }

inline void soap_delete_csreq__CommandStationRequest(struct soap *soap, struct csreq__CommandStationRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_csreq__CommandStationRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

/* _csreq_CommandStationRequest is a typedef element/attribute synonym for CommandStationRequest */

#ifndef SOAP_TYPE__csreq_CommandStationRequest
#define SOAP_TYPE__csreq_CommandStationRequest (66)
#endif

#define soap_default__csreq_CommandStationRequest(soap, a) soap_default_CommandStationRequest(soap, a)


#define soap_serialize__csreq_CommandStationRequest soap_serialize_CommandStationRequest


#define soap_out__csreq_CommandStationRequest soap_out_CommandStationRequest


#define soap_in__csreq_CommandStationRequest soap_in_CommandStationRequest


#define soap_put__csreq_CommandStationRequest soap_put_CommandStationRequest


#define soap_get__csreq_CommandStationRequest soap_get_CommandStationRequest


#define soap_instantiate__csreq_CommandStationRequest soap_instantiate_CommandStationRequest


#define soap_copy__csreq_CommandStationRequest soap_copy_CommandStationRequest

#ifndef SOAP_TYPE_CommandStationRequest
#define SOAP_TYPE_CommandStationRequest (65)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_CommandStationRequest(struct soap*, struct CommandStationRequest *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_CommandStationRequest(struct soap*, const struct CommandStationRequest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_CommandStationRequest(struct soap*, const char*, int, const struct CommandStationRequest *, const char*);
SOAP_FMAC3 struct CommandStationRequest * SOAP_FMAC4 soap_in_CommandStationRequest(struct soap*, const char*, struct CommandStationRequest *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_CommandStationRequest(struct soap*, const struct CommandStationRequest *, const char*, const char*);

#ifndef soap_write_CommandStationRequest
#define soap_write_CommandStationRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_CommandStationRequest(soap, data),0) || soap_put_CommandStationRequest(soap, data, "CommandStationRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct CommandStationRequest * SOAP_FMAC4 soap_get_CommandStationRequest(struct soap*, struct CommandStationRequest *, const char*, const char*);

#ifndef soap_read_CommandStationRequest
#define soap_read_CommandStationRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_CommandStationRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct CommandStationRequest * SOAP_FMAC2 soap_instantiate_CommandStationRequest(struct soap*, int, const char*, const char*, size_t*);

inline struct CommandStationRequest * soap_new_CommandStationRequest(struct soap *soap, int n = -1) { return soap_instantiate_CommandStationRequest(soap, n, NULL, NULL, NULL); }

inline struct CommandStationRequest * soap_new_req_CommandStationRequest(struct soap *soap, enum CommandStation eCommand, std::wstring& strStationName) { struct CommandStationRequest *_p = soap_instantiate_CommandStationRequest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_CommandStationRequest(soap, _p); _p->eCommand = eCommand; _p->strStationName = strStationName; } return _p; }

inline struct CommandStationRequest * soap_new_set_CommandStationRequest(struct soap *soap, enum CommandStation eCommand, std::wstring& strStationName) { struct CommandStationRequest *_p = soap_instantiate_CommandStationRequest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_CommandStationRequest(soap, _p); _p->eCommand = eCommand; _p->strStationName = strStationName; } return _p; }

inline void soap_delete_CommandStationRequest(struct soap *soap, struct CommandStationRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_CommandStationRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fsres__CFindStationResponse
#define SOAP_TYPE_fsres__CFindStationResponse (62)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_fsres__CFindStationResponse(struct soap*, struct fsres__CFindStationResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fsres__CFindStationResponse(struct soap*, const struct fsres__CFindStationResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fsres__CFindStationResponse(struct soap*, const char*, int, const struct fsres__CFindStationResponse *, const char*);
SOAP_FMAC3 struct fsres__CFindStationResponse * SOAP_FMAC4 soap_in_fsres__CFindStationResponse(struct soap*, const char*, struct fsres__CFindStationResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fsres__CFindStationResponse(struct soap*, const struct fsres__CFindStationResponse *, const char*, const char*);

#ifndef soap_write_fsres__CFindStationResponse
#define soap_write_fsres__CFindStationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_fsres__CFindStationResponse(soap, data),0) || soap_put_fsres__CFindStationResponse(soap, data, "fsres:CFindStationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct fsres__CFindStationResponse * SOAP_FMAC4 soap_get_fsres__CFindStationResponse(struct soap*, struct fsres__CFindStationResponse *, const char*, const char*);

#ifndef soap_read_fsres__CFindStationResponse
#define soap_read_fsres__CFindStationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_fsres__CFindStationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct fsres__CFindStationResponse * SOAP_FMAC2 soap_instantiate_fsres__CFindStationResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct fsres__CFindStationResponse * soap_new_fsres__CFindStationResponse(struct soap *soap, int n = -1) { return soap_instantiate_fsres__CFindStationResponse(soap, n, NULL, NULL, NULL); }

inline struct fsres__CFindStationResponse * soap_new_req_fsres__CFindStationResponse(struct soap *soap, _fsres__CFindStationResponse& return_) { struct fsres__CFindStationResponse *_p = soap_instantiate_fsres__CFindStationResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_fsres__CFindStationResponse(soap, _p); _p->return_ = return_; } return _p; }

inline struct fsres__CFindStationResponse * soap_new_set_fsres__CFindStationResponse(struct soap *soap, _fsres__CFindStationResponse& return_) { struct fsres__CFindStationResponse *_p = soap_instantiate_fsres__CFindStationResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_fsres__CFindStationResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_fsres__CFindStationResponse(struct soap *soap, struct fsres__CFindStationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fsres__CFindStationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

/* _fsres_FindStationResponse is a typedef element/attribute synonym for FindStationResponse */

#ifndef SOAP_TYPE__fsres_FindStationResponse
#define SOAP_TYPE__fsres_FindStationResponse (59)
#endif

#define soap_default__fsres_FindStationResponse(soap, a) soap_default_FindStationResponse(soap, a)


#define soap_serialize__fsres_FindStationResponse soap_serialize_FindStationResponse


#define soap_out__fsres_FindStationResponse soap_out_FindStationResponse


#define soap_in__fsres_FindStationResponse soap_in_FindStationResponse


#define soap_put__fsres_FindStationResponse soap_put_FindStationResponse


#define soap_get__fsres_FindStationResponse soap_get_FindStationResponse


#define soap_instantiate__fsres_FindStationResponse soap_instantiate_FindStationResponse


#define soap_copy__fsres_FindStationResponse soap_copy_FindStationResponse

#ifndef SOAP_TYPE_FindStationResponse
#define SOAP_TYPE_FindStationResponse (58)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_FindStationResponse(struct soap*, struct FindStationResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_FindStationResponse(struct soap*, const struct FindStationResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_FindStationResponse(struct soap*, const char*, int, const struct FindStationResponse *, const char*);
SOAP_FMAC3 struct FindStationResponse * SOAP_FMAC4 soap_in_FindStationResponse(struct soap*, const char*, struct FindStationResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_FindStationResponse(struct soap*, const struct FindStationResponse *, const char*, const char*);

#ifndef soap_write_FindStationResponse
#define soap_write_FindStationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_FindStationResponse(soap, data),0) || soap_put_FindStationResponse(soap, data, "FindStationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct FindStationResponse * SOAP_FMAC4 soap_get_FindStationResponse(struct soap*, struct FindStationResponse *, const char*, const char*);

#ifndef soap_read_FindStationResponse
#define soap_read_FindStationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_FindStationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct FindStationResponse * SOAP_FMAC2 soap_instantiate_FindStationResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct FindStationResponse * soap_new_FindStationResponse(struct soap *soap, int n = -1) { return soap_instantiate_FindStationResponse(soap, n, NULL, NULL, NULL); }

inline struct FindStationResponse * soap_new_req_FindStationResponse(struct soap *soap, std::wstring& strIPAddress, std::wstring& strStationName, std::wstring& strStatus) { struct FindStationResponse *_p = soap_instantiate_FindStationResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_FindStationResponse(soap, _p); _p->strIPAddress = strIPAddress; _p->strStationName = strStationName; _p->strStatus = strStatus; } return _p; }

inline struct FindStationResponse * soap_new_set_FindStationResponse(struct soap *soap, std::wstring& strIPAddress, std::wstring& strStationName, std::wstring& strStatus) { struct FindStationResponse *_p = soap_instantiate_FindStationResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_FindStationResponse(soap, _p); _p->strIPAddress = strIPAddress; _p->strStationName = strStationName; _p->strStatus = strStatus; } return _p; }

inline void soap_delete_FindStationResponse(struct soap *soap, struct FindStationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_FindStationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fsreq__FindStationRequest
#define SOAP_TYPE_fsreq__FindStationRequest (57)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_fsreq__FindStationRequest(struct soap*, struct fsreq__FindStationRequest *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fsreq__FindStationRequest(struct soap*, const struct fsreq__FindStationRequest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fsreq__FindStationRequest(struct soap*, const char*, int, const struct fsreq__FindStationRequest *, const char*);
SOAP_FMAC3 struct fsreq__FindStationRequest * SOAP_FMAC4 soap_in_fsreq__FindStationRequest(struct soap*, const char*, struct fsreq__FindStationRequest *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fsreq__FindStationRequest(struct soap*, const struct fsreq__FindStationRequest *, const char*, const char*);

#ifndef soap_write_fsreq__FindStationRequest
#define soap_write_fsreq__FindStationRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_fsreq__FindStationRequest(soap, data),0) || soap_put_fsreq__FindStationRequest(soap, data, "fsreq:FindStationRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct fsreq__FindStationRequest * SOAP_FMAC4 soap_get_fsreq__FindStationRequest(struct soap*, struct fsreq__FindStationRequest *, const char*, const char*);

#ifndef soap_read_fsreq__FindStationRequest
#define soap_read_fsreq__FindStationRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_fsreq__FindStationRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct fsreq__FindStationRequest * SOAP_FMAC2 soap_instantiate_fsreq__FindStationRequest(struct soap*, int, const char*, const char*, size_t*);

inline struct fsreq__FindStationRequest * soap_new_fsreq__FindStationRequest(struct soap *soap, int n = -1) { return soap_instantiate_fsreq__FindStationRequest(soap, n, NULL, NULL, NULL); }

inline struct fsreq__FindStationRequest * soap_new_req_fsreq__FindStationRequest(struct soap *soap, struct FindStationRequest& return_) { struct fsreq__FindStationRequest *_p = soap_instantiate_fsreq__FindStationRequest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_fsreq__FindStationRequest(soap, _p); _p->return_ = return_; } return _p; }

inline struct fsreq__FindStationRequest * soap_new_set_fsreq__FindStationRequest(struct soap *soap, struct FindStationRequest& return_) { struct fsreq__FindStationRequest *_p = soap_instantiate_fsreq__FindStationRequest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_fsreq__FindStationRequest(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_fsreq__FindStationRequest(struct soap *soap, struct fsreq__FindStationRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fsreq__FindStationRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

/* _fsreq_FindStationRequest is a typedef element/attribute synonym for FindStationRequest */

#ifndef SOAP_TYPE__fsreq_FindStationRequest
#define SOAP_TYPE__fsreq_FindStationRequest (56)
#endif

#define soap_default__fsreq_FindStationRequest(soap, a) soap_default_FindStationRequest(soap, a)


#define soap_serialize__fsreq_FindStationRequest soap_serialize_FindStationRequest


#define soap_out__fsreq_FindStationRequest soap_out_FindStationRequest


#define soap_in__fsreq_FindStationRequest soap_in_FindStationRequest


#define soap_put__fsreq_FindStationRequest soap_put_FindStationRequest


#define soap_get__fsreq_FindStationRequest soap_get_FindStationRequest


#define soap_instantiate__fsreq_FindStationRequest soap_instantiate_FindStationRequest


#define soap_copy__fsreq_FindStationRequest soap_copy_FindStationRequest

#ifndef SOAP_TYPE_FindStationRequest
#define SOAP_TYPE_FindStationRequest (55)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_FindStationRequest(struct soap*, struct FindStationRequest *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_FindStationRequest(struct soap*, const struct FindStationRequest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_FindStationRequest(struct soap*, const char*, int, const struct FindStationRequest *, const char*);
SOAP_FMAC3 struct FindStationRequest * SOAP_FMAC4 soap_in_FindStationRequest(struct soap*, const char*, struct FindStationRequest *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_FindStationRequest(struct soap*, const struct FindStationRequest *, const char*, const char*);

#ifndef soap_write_FindStationRequest
#define soap_write_FindStationRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_FindStationRequest(soap, data),0) || soap_put_FindStationRequest(soap, data, "FindStationRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct FindStationRequest * SOAP_FMAC4 soap_get_FindStationRequest(struct soap*, struct FindStationRequest *, const char*, const char*);

#ifndef soap_read_FindStationRequest
#define soap_read_FindStationRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_FindStationRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct FindStationRequest * SOAP_FMAC2 soap_instantiate_FindStationRequest(struct soap*, int, const char*, const char*, size_t*);

inline struct FindStationRequest * soap_new_FindStationRequest(struct soap *soap, int n = -1) { return soap_instantiate_FindStationRequest(soap, n, NULL, NULL, NULL); }

inline struct FindStationRequest * soap_new_req_FindStationRequest(struct soap *soap, bool bDummy) { struct FindStationRequest *_p = soap_instantiate_FindStationRequest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_FindStationRequest(soap, _p); _p->bDummy = bDummy; } return _p; }

inline struct FindStationRequest * soap_new_set_FindStationRequest(struct soap *soap, bool bDummy) { struct FindStationRequest *_p = soap_instantiate_FindStationRequest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_FindStationRequest(soap, _p); _p->bDummy = bDummy; } return _p; }

inline void soap_delete_FindStationRequest(struct soap *soap, struct FindStationRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_FindStationRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_rlres__CReadLogResponse
#define SOAP_TYPE_rlres__CReadLogResponse (54)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_rlres__CReadLogResponse(struct soap*, struct rlres__CReadLogResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_rlres__CReadLogResponse(struct soap*, const struct rlres__CReadLogResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_rlres__CReadLogResponse(struct soap*, const char*, int, const struct rlres__CReadLogResponse *, const char*);
SOAP_FMAC3 struct rlres__CReadLogResponse * SOAP_FMAC4 soap_in_rlres__CReadLogResponse(struct soap*, const char*, struct rlres__CReadLogResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_rlres__CReadLogResponse(struct soap*, const struct rlres__CReadLogResponse *, const char*, const char*);

#ifndef soap_write_rlres__CReadLogResponse
#define soap_write_rlres__CReadLogResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_rlres__CReadLogResponse(soap, data),0) || soap_put_rlres__CReadLogResponse(soap, data, "rlres:CReadLogResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct rlres__CReadLogResponse * SOAP_FMAC4 soap_get_rlres__CReadLogResponse(struct soap*, struct rlres__CReadLogResponse *, const char*, const char*);

#ifndef soap_read_rlres__CReadLogResponse
#define soap_read_rlres__CReadLogResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_rlres__CReadLogResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct rlres__CReadLogResponse * SOAP_FMAC2 soap_instantiate_rlres__CReadLogResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct rlres__CReadLogResponse * soap_new_rlres__CReadLogResponse(struct soap *soap, int n = -1) { return soap_instantiate_rlres__CReadLogResponse(soap, n, NULL, NULL, NULL); }

inline struct rlres__CReadLogResponse * soap_new_req_rlres__CReadLogResponse(struct soap *soap, _rlres__CReadLogResponse& return_) { struct rlres__CReadLogResponse *_p = soap_instantiate_rlres__CReadLogResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_rlres__CReadLogResponse(soap, _p); _p->return_ = return_; } return _p; }

inline struct rlres__CReadLogResponse * soap_new_set_rlres__CReadLogResponse(struct soap *soap, _rlres__CReadLogResponse& return_) { struct rlres__CReadLogResponse *_p = soap_instantiate_rlres__CReadLogResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_rlres__CReadLogResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_rlres__CReadLogResponse(struct soap *soap, struct rlres__CReadLogResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_rlres__CReadLogResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

/* _rlres_ReadLogResponse is a typedef element/attribute synonym for ReadLogResponse */

#ifndef SOAP_TYPE__rlres_ReadLogResponse
#define SOAP_TYPE__rlres_ReadLogResponse (51)
#endif

#define soap_default__rlres_ReadLogResponse(soap, a) soap_default_ReadLogResponse(soap, a)


#define soap_serialize__rlres_ReadLogResponse soap_serialize_ReadLogResponse


#define soap_out__rlres_ReadLogResponse soap_out_ReadLogResponse


#define soap_in__rlres_ReadLogResponse soap_in_ReadLogResponse


#define soap_put__rlres_ReadLogResponse soap_put_ReadLogResponse


#define soap_get__rlres_ReadLogResponse soap_get_ReadLogResponse


#define soap_instantiate__rlres_ReadLogResponse soap_instantiate_ReadLogResponse


#define soap_copy__rlres_ReadLogResponse soap_copy_ReadLogResponse

#ifndef SOAP_TYPE_ReadLogResponse
#define SOAP_TYPE_ReadLogResponse (50)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ReadLogResponse(struct soap*, struct ReadLogResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ReadLogResponse(struct soap*, const struct ReadLogResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ReadLogResponse(struct soap*, const char*, int, const struct ReadLogResponse *, const char*);
SOAP_FMAC3 struct ReadLogResponse * SOAP_FMAC4 soap_in_ReadLogResponse(struct soap*, const char*, struct ReadLogResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ReadLogResponse(struct soap*, const struct ReadLogResponse *, const char*, const char*);

#ifndef soap_write_ReadLogResponse
#define soap_write_ReadLogResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ReadLogResponse(soap, data),0) || soap_put_ReadLogResponse(soap, data, "ReadLogResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ReadLogResponse * SOAP_FMAC4 soap_get_ReadLogResponse(struct soap*, struct ReadLogResponse *, const char*, const char*);

#ifndef soap_read_ReadLogResponse
#define soap_read_ReadLogResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ReadLogResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ReadLogResponse * SOAP_FMAC2 soap_instantiate_ReadLogResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ReadLogResponse * soap_new_ReadLogResponse(struct soap *soap, int n = -1) { return soap_instantiate_ReadLogResponse(soap, n, NULL, NULL, NULL); }

inline struct ReadLogResponse * soap_new_req_ReadLogResponse(struct soap *soap, std::wstring& strDate, std::wstring& strTime, std::wstring& strLevel, std::wstring& strFuncName, std::wstring& strMessage) { struct ReadLogResponse *_p = soap_instantiate_ReadLogResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ReadLogResponse(soap, _p); _p->strDate = strDate; _p->strTime = strTime; _p->strLevel = strLevel; _p->strFuncName = strFuncName; _p->strMessage = strMessage; } return _p; }

inline struct ReadLogResponse * soap_new_set_ReadLogResponse(struct soap *soap, std::wstring& strDate, std::wstring& strTime, std::wstring& strLevel, std::wstring& strFuncName, std::wstring& strMessage) { struct ReadLogResponse *_p = soap_instantiate_ReadLogResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ReadLogResponse(soap, _p); _p->strDate = strDate; _p->strTime = strTime; _p->strLevel = strLevel; _p->strFuncName = strFuncName; _p->strMessage = strMessage; } return _p; }

inline void soap_delete_ReadLogResponse(struct soap *soap, struct ReadLogResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ReadLogResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_rlreq__ReadLogRequest
#define SOAP_TYPE_rlreq__ReadLogRequest (49)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_rlreq__ReadLogRequest(struct soap*, struct rlreq__ReadLogRequest *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_rlreq__ReadLogRequest(struct soap*, const struct rlreq__ReadLogRequest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_rlreq__ReadLogRequest(struct soap*, const char*, int, const struct rlreq__ReadLogRequest *, const char*);
SOAP_FMAC3 struct rlreq__ReadLogRequest * SOAP_FMAC4 soap_in_rlreq__ReadLogRequest(struct soap*, const char*, struct rlreq__ReadLogRequest *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_rlreq__ReadLogRequest(struct soap*, const struct rlreq__ReadLogRequest *, const char*, const char*);

#ifndef soap_write_rlreq__ReadLogRequest
#define soap_write_rlreq__ReadLogRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_rlreq__ReadLogRequest(soap, data),0) || soap_put_rlreq__ReadLogRequest(soap, data, "rlreq:ReadLogRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct rlreq__ReadLogRequest * SOAP_FMAC4 soap_get_rlreq__ReadLogRequest(struct soap*, struct rlreq__ReadLogRequest *, const char*, const char*);

#ifndef soap_read_rlreq__ReadLogRequest
#define soap_read_rlreq__ReadLogRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_rlreq__ReadLogRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct rlreq__ReadLogRequest * SOAP_FMAC2 soap_instantiate_rlreq__ReadLogRequest(struct soap*, int, const char*, const char*, size_t*);

inline struct rlreq__ReadLogRequest * soap_new_rlreq__ReadLogRequest(struct soap *soap, int n = -1) { return soap_instantiate_rlreq__ReadLogRequest(soap, n, NULL, NULL, NULL); }

inline struct rlreq__ReadLogRequest * soap_new_req_rlreq__ReadLogRequest(struct soap *soap, struct ReadLogRequest& return_) { struct rlreq__ReadLogRequest *_p = soap_instantiate_rlreq__ReadLogRequest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_rlreq__ReadLogRequest(soap, _p); _p->return_ = return_; } return _p; }

inline struct rlreq__ReadLogRequest * soap_new_set_rlreq__ReadLogRequest(struct soap *soap, struct ReadLogRequest& return_) { struct rlreq__ReadLogRequest *_p = soap_instantiate_rlreq__ReadLogRequest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_rlreq__ReadLogRequest(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_rlreq__ReadLogRequest(struct soap *soap, struct rlreq__ReadLogRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_rlreq__ReadLogRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

/* _rlreq_ReadLogRequest is a typedef element/attribute synonym for ReadLogRequest */

#ifndef SOAP_TYPE__rlreq_ReadLogRequest
#define SOAP_TYPE__rlreq_ReadLogRequest (48)
#endif

#define soap_default__rlreq_ReadLogRequest(soap, a) soap_default_ReadLogRequest(soap, a)


#define soap_serialize__rlreq_ReadLogRequest soap_serialize_ReadLogRequest


#define soap_out__rlreq_ReadLogRequest soap_out_ReadLogRequest


#define soap_in__rlreq_ReadLogRequest soap_in_ReadLogRequest


#define soap_put__rlreq_ReadLogRequest soap_put_ReadLogRequest


#define soap_get__rlreq_ReadLogRequest soap_get_ReadLogRequest


#define soap_instantiate__rlreq_ReadLogRequest soap_instantiate_ReadLogRequest


#define soap_copy__rlreq_ReadLogRequest soap_copy_ReadLogRequest

#ifndef SOAP_TYPE_ReadLogRequest
#define SOAP_TYPE_ReadLogRequest (47)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ReadLogRequest(struct soap*, struct ReadLogRequest *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ReadLogRequest(struct soap*, const struct ReadLogRequest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ReadLogRequest(struct soap*, const char*, int, const struct ReadLogRequest *, const char*);
SOAP_FMAC3 struct ReadLogRequest * SOAP_FMAC4 soap_in_ReadLogRequest(struct soap*, const char*, struct ReadLogRequest *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ReadLogRequest(struct soap*, const struct ReadLogRequest *, const char*, const char*);

#ifndef soap_write_ReadLogRequest
#define soap_write_ReadLogRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ReadLogRequest(soap, data),0) || soap_put_ReadLogRequest(soap, data, "ReadLogRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ReadLogRequest * SOAP_FMAC4 soap_get_ReadLogRequest(struct soap*, struct ReadLogRequest *, const char*, const char*);

#ifndef soap_read_ReadLogRequest
#define soap_read_ReadLogRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_ReadLogRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ReadLogRequest * SOAP_FMAC2 soap_instantiate_ReadLogRequest(struct soap*, int, const char*, const char*, size_t*);

inline struct ReadLogRequest * soap_new_ReadLogRequest(struct soap *soap, int n = -1) { return soap_instantiate_ReadLogRequest(soap, n, NULL, NULL, NULL); }

inline struct ReadLogRequest * soap_new_req_ReadLogRequest(struct soap *soap, std::wstring& strAETitle) { struct ReadLogRequest *_p = soap_instantiate_ReadLogRequest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ReadLogRequest(soap, _p); _p->strAETitle = strAETitle; } return _p; }

inline struct ReadLogRequest * soap_new_set_ReadLogRequest(struct soap *soap, std::wstring& strAETitle) { struct ReadLogRequest *_p = soap_instantiate_ReadLogRequest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ReadLogRequest(soap, _p); _p->strAETitle = strAETitle; } return _p; }

inline void soap_delete_ReadLogRequest(struct soap *soap, struct ReadLogRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ReadLogRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wlres__WriteLogResponse
#define SOAP_TYPE_wlres__WriteLogResponse (46)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wlres__WriteLogResponse(struct soap*, struct wlres__WriteLogResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wlres__WriteLogResponse(struct soap*, const struct wlres__WriteLogResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wlres__WriteLogResponse(struct soap*, const char*, int, const struct wlres__WriteLogResponse *, const char*);
SOAP_FMAC3 struct wlres__WriteLogResponse * SOAP_FMAC4 soap_in_wlres__WriteLogResponse(struct soap*, const char*, struct wlres__WriteLogResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wlres__WriteLogResponse(struct soap*, const struct wlres__WriteLogResponse *, const char*, const char*);

#ifndef soap_write_wlres__WriteLogResponse
#define soap_write_wlres__WriteLogResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_wlres__WriteLogResponse(soap, data),0) || soap_put_wlres__WriteLogResponse(soap, data, "wlres:WriteLogResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct wlres__WriteLogResponse * SOAP_FMAC4 soap_get_wlres__WriteLogResponse(struct soap*, struct wlres__WriteLogResponse *, const char*, const char*);

#ifndef soap_read_wlres__WriteLogResponse
#define soap_read_wlres__WriteLogResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_wlres__WriteLogResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct wlres__WriteLogResponse * SOAP_FMAC2 soap_instantiate_wlres__WriteLogResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct wlres__WriteLogResponse * soap_new_wlres__WriteLogResponse(struct soap *soap, int n = -1) { return soap_instantiate_wlres__WriteLogResponse(soap, n, NULL, NULL, NULL); }

inline struct wlres__WriteLogResponse * soap_new_req_wlres__WriteLogResponse(struct soap *soap, struct WriteLogResponse& return_) { struct wlres__WriteLogResponse *_p = soap_instantiate_wlres__WriteLogResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_wlres__WriteLogResponse(soap, _p); _p->return_ = return_; } return _p; }

inline struct wlres__WriteLogResponse * soap_new_set_wlres__WriteLogResponse(struct soap *soap, struct WriteLogResponse& return_) { struct wlres__WriteLogResponse *_p = soap_instantiate_wlres__WriteLogResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_wlres__WriteLogResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_wlres__WriteLogResponse(struct soap *soap, struct wlres__WriteLogResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wlres__WriteLogResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

/* _wlres_WriteLogResponse is a typedef element/attribute synonym for WriteLogResponse */

#ifndef SOAP_TYPE__wlres_WriteLogResponse
#define SOAP_TYPE__wlres_WriteLogResponse (45)
#endif

#define soap_default__wlres_WriteLogResponse(soap, a) soap_default_WriteLogResponse(soap, a)


#define soap_serialize__wlres_WriteLogResponse soap_serialize_WriteLogResponse


#define soap_out__wlres_WriteLogResponse soap_out_WriteLogResponse


#define soap_in__wlres_WriteLogResponse soap_in_WriteLogResponse


#define soap_put__wlres_WriteLogResponse soap_put_WriteLogResponse


#define soap_get__wlres_WriteLogResponse soap_get_WriteLogResponse


#define soap_instantiate__wlres_WriteLogResponse soap_instantiate_WriteLogResponse


#define soap_copy__wlres_WriteLogResponse soap_copy_WriteLogResponse

#ifndef SOAP_TYPE_WriteLogResponse
#define SOAP_TYPE_WriteLogResponse (44)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_WriteLogResponse(struct soap*, struct WriteLogResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_WriteLogResponse(struct soap*, const struct WriteLogResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_WriteLogResponse(struct soap*, const char*, int, const struct WriteLogResponse *, const char*);
SOAP_FMAC3 struct WriteLogResponse * SOAP_FMAC4 soap_in_WriteLogResponse(struct soap*, const char*, struct WriteLogResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_WriteLogResponse(struct soap*, const struct WriteLogResponse *, const char*, const char*);

#ifndef soap_write_WriteLogResponse
#define soap_write_WriteLogResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_WriteLogResponse(soap, data),0) || soap_put_WriteLogResponse(soap, data, "WriteLogResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct WriteLogResponse * SOAP_FMAC4 soap_get_WriteLogResponse(struct soap*, struct WriteLogResponse *, const char*, const char*);

#ifndef soap_read_WriteLogResponse
#define soap_read_WriteLogResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_WriteLogResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct WriteLogResponse * SOAP_FMAC2 soap_instantiate_WriteLogResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct WriteLogResponse * soap_new_WriteLogResponse(struct soap *soap, int n = -1) { return soap_instantiate_WriteLogResponse(soap, n, NULL, NULL, NULL); }

inline struct WriteLogResponse * soap_new_req_WriteLogResponse(struct soap *soap, bool bDummy) { struct WriteLogResponse *_p = soap_instantiate_WriteLogResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_WriteLogResponse(soap, _p); _p->bDummy = bDummy; } return _p; }

inline struct WriteLogResponse * soap_new_set_WriteLogResponse(struct soap *soap, bool bDummy) { struct WriteLogResponse *_p = soap_instantiate_WriteLogResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_WriteLogResponse(soap, _p); _p->bDummy = bDummy; } return _p; }

inline void soap_delete_WriteLogResponse(struct soap *soap, struct WriteLogResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_WriteLogResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wlreq__WriteLogRequest
#define SOAP_TYPE_wlreq__WriteLogRequest (43)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wlreq__WriteLogRequest(struct soap*, struct wlreq__WriteLogRequest *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wlreq__WriteLogRequest(struct soap*, const struct wlreq__WriteLogRequest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wlreq__WriteLogRequest(struct soap*, const char*, int, const struct wlreq__WriteLogRequest *, const char*);
SOAP_FMAC3 struct wlreq__WriteLogRequest * SOAP_FMAC4 soap_in_wlreq__WriteLogRequest(struct soap*, const char*, struct wlreq__WriteLogRequest *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wlreq__WriteLogRequest(struct soap*, const struct wlreq__WriteLogRequest *, const char*, const char*);

#ifndef soap_write_wlreq__WriteLogRequest
#define soap_write_wlreq__WriteLogRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_wlreq__WriteLogRequest(soap, data),0) || soap_put_wlreq__WriteLogRequest(soap, data, "wlreq:WriteLogRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct wlreq__WriteLogRequest * SOAP_FMAC4 soap_get_wlreq__WriteLogRequest(struct soap*, struct wlreq__WriteLogRequest *, const char*, const char*);

#ifndef soap_read_wlreq__WriteLogRequest
#define soap_read_wlreq__WriteLogRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_wlreq__WriteLogRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct wlreq__WriteLogRequest * SOAP_FMAC2 soap_instantiate_wlreq__WriteLogRequest(struct soap*, int, const char*, const char*, size_t*);

inline struct wlreq__WriteLogRequest * soap_new_wlreq__WriteLogRequest(struct soap *soap, int n = -1) { return soap_instantiate_wlreq__WriteLogRequest(soap, n, NULL, NULL, NULL); }

inline struct wlreq__WriteLogRequest * soap_new_req_wlreq__WriteLogRequest(struct soap *soap, struct WriteLogRequest& return_) { struct wlreq__WriteLogRequest *_p = soap_instantiate_wlreq__WriteLogRequest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_wlreq__WriteLogRequest(soap, _p); _p->return_ = return_; } return _p; }

inline struct wlreq__WriteLogRequest * soap_new_set_wlreq__WriteLogRequest(struct soap *soap, struct WriteLogRequest& return_) { struct wlreq__WriteLogRequest *_p = soap_instantiate_wlreq__WriteLogRequest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_wlreq__WriteLogRequest(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_wlreq__WriteLogRequest(struct soap *soap, struct wlreq__WriteLogRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wlreq__WriteLogRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

/* _wlreq_WriteLogRequest is a typedef element/attribute synonym for WriteLogRequest */

#ifndef SOAP_TYPE__wlreq_WriteLogRequest
#define SOAP_TYPE__wlreq_WriteLogRequest (42)
#endif

#define soap_default__wlreq_WriteLogRequest(soap, a) soap_default_WriteLogRequest(soap, a)


#define soap_serialize__wlreq_WriteLogRequest soap_serialize_WriteLogRequest


#define soap_out__wlreq_WriteLogRequest soap_out_WriteLogRequest


#define soap_in__wlreq_WriteLogRequest soap_in_WriteLogRequest


#define soap_put__wlreq_WriteLogRequest soap_put_WriteLogRequest


#define soap_get__wlreq_WriteLogRequest soap_get_WriteLogRequest


#define soap_instantiate__wlreq_WriteLogRequest soap_instantiate_WriteLogRequest


#define soap_copy__wlreq_WriteLogRequest soap_copy_WriteLogRequest

#ifndef SOAP_TYPE_WriteLogRequest
#define SOAP_TYPE_WriteLogRequest (41)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_WriteLogRequest(struct soap*, struct WriteLogRequest *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_WriteLogRequest(struct soap*, const struct WriteLogRequest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_WriteLogRequest(struct soap*, const char*, int, const struct WriteLogRequest *, const char*);
SOAP_FMAC3 struct WriteLogRequest * SOAP_FMAC4 soap_in_WriteLogRequest(struct soap*, const char*, struct WriteLogRequest *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_WriteLogRequest(struct soap*, const struct WriteLogRequest *, const char*, const char*);

#ifndef soap_write_WriteLogRequest
#define soap_write_WriteLogRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_WriteLogRequest(soap, data),0) || soap_put_WriteLogRequest(soap, data, "WriteLogRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct WriteLogRequest * SOAP_FMAC4 soap_get_WriteLogRequest(struct soap*, struct WriteLogRequest *, const char*, const char*);

#ifndef soap_read_WriteLogRequest
#define soap_read_WriteLogRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_WriteLogRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct WriteLogRequest * SOAP_FMAC2 soap_instantiate_WriteLogRequest(struct soap*, int, const char*, const char*, size_t*);

inline struct WriteLogRequest * soap_new_WriteLogRequest(struct soap *soap, int n = -1) { return soap_instantiate_WriteLogRequest(soap, n, NULL, NULL, NULL); }

inline struct WriteLogRequest * soap_new_req_WriteLogRequest(struct soap *soap, std::wstring& strAETitle, std::wstring& strLog) { struct WriteLogRequest *_p = soap_instantiate_WriteLogRequest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_WriteLogRequest(soap, _p); _p->strAETitle = strAETitle; _p->strLog = strLog; } return _p; }

inline struct WriteLogRequest * soap_new_set_WriteLogRequest(struct soap *soap, std::wstring& strAETitle, std::wstring& strLog) { struct WriteLogRequest *_p = soap_instantiate_WriteLogRequest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_WriteLogRequest(soap, _p); _p->strAETitle = strAETitle; _p->strLog = strLog; } return _p; }

inline void soap_delete_WriteLogRequest(struct soap *soap, struct WriteLogRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_WriteLogRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_frres__FindReceiverResponse
#define SOAP_TYPE_frres__FindReceiverResponse (40)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_frres__FindReceiverResponse(struct soap*, struct frres__FindReceiverResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_frres__FindReceiverResponse(struct soap*, const struct frres__FindReceiverResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_frres__FindReceiverResponse(struct soap*, const char*, int, const struct frres__FindReceiverResponse *, const char*);
SOAP_FMAC3 struct frres__FindReceiverResponse * SOAP_FMAC4 soap_in_frres__FindReceiverResponse(struct soap*, const char*, struct frres__FindReceiverResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_frres__FindReceiverResponse(struct soap*, const struct frres__FindReceiverResponse *, const char*, const char*);

#ifndef soap_write_frres__FindReceiverResponse
#define soap_write_frres__FindReceiverResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_frres__FindReceiverResponse(soap, data),0) || soap_put_frres__FindReceiverResponse(soap, data, "frres:FindReceiverResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct frres__FindReceiverResponse * SOAP_FMAC4 soap_get_frres__FindReceiverResponse(struct soap*, struct frres__FindReceiverResponse *, const char*, const char*);

#ifndef soap_read_frres__FindReceiverResponse
#define soap_read_frres__FindReceiverResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_frres__FindReceiverResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct frres__FindReceiverResponse * SOAP_FMAC2 soap_instantiate_frres__FindReceiverResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct frres__FindReceiverResponse * soap_new_frres__FindReceiverResponse(struct soap *soap, int n = -1) { return soap_instantiate_frres__FindReceiverResponse(soap, n, NULL, NULL, NULL); }

inline struct frres__FindReceiverResponse * soap_new_req_frres__FindReceiverResponse(struct soap *soap, struct FindReceiverResponse& return_) { struct frres__FindReceiverResponse *_p = soap_instantiate_frres__FindReceiverResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_frres__FindReceiverResponse(soap, _p); _p->return_ = return_; } return _p; }

inline struct frres__FindReceiverResponse * soap_new_set_frres__FindReceiverResponse(struct soap *soap, struct FindReceiverResponse& return_) { struct frres__FindReceiverResponse *_p = soap_instantiate_frres__FindReceiverResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_frres__FindReceiverResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_frres__FindReceiverResponse(struct soap *soap, struct frres__FindReceiverResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_frres__FindReceiverResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

/* _frres_FindReceiverResponse is a typedef element/attribute synonym for FindReceiverResponse */

#ifndef SOAP_TYPE__frres_FindReceiverResponse
#define SOAP_TYPE__frres_FindReceiverResponse (39)
#endif

#define soap_default__frres_FindReceiverResponse(soap, a) soap_default_FindReceiverResponse(soap, a)


#define soap_serialize__frres_FindReceiverResponse soap_serialize_FindReceiverResponse


#define soap_out__frres_FindReceiverResponse soap_out_FindReceiverResponse


#define soap_in__frres_FindReceiverResponse soap_in_FindReceiverResponse


#define soap_put__frres_FindReceiverResponse soap_put_FindReceiverResponse


#define soap_get__frres_FindReceiverResponse soap_get_FindReceiverResponse


#define soap_instantiate__frres_FindReceiverResponse soap_instantiate_FindReceiverResponse


#define soap_copy__frres_FindReceiverResponse soap_copy_FindReceiverResponse

#ifndef SOAP_TYPE_FindReceiverResponse
#define SOAP_TYPE_FindReceiverResponse (37)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_FindReceiverResponse(struct soap*, struct FindReceiverResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_FindReceiverResponse(struct soap*, const struct FindReceiverResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_FindReceiverResponse(struct soap*, const char*, int, const struct FindReceiverResponse *, const char*);
SOAP_FMAC3 struct FindReceiverResponse * SOAP_FMAC4 soap_in_FindReceiverResponse(struct soap*, const char*, struct FindReceiverResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_FindReceiverResponse(struct soap*, const struct FindReceiverResponse *, const char*, const char*);

#ifndef soap_write_FindReceiverResponse
#define soap_write_FindReceiverResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_FindReceiverResponse(soap, data),0) || soap_put_FindReceiverResponse(soap, data, "FindReceiverResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct FindReceiverResponse * SOAP_FMAC4 soap_get_FindReceiverResponse(struct soap*, struct FindReceiverResponse *, const char*, const char*);

#ifndef soap_read_FindReceiverResponse
#define soap_read_FindReceiverResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_FindReceiverResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct FindReceiverResponse * SOAP_FMAC2 soap_instantiate_FindReceiverResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct FindReceiverResponse * soap_new_FindReceiverResponse(struct soap *soap, int n = -1) { return soap_instantiate_FindReceiverResponse(soap, n, NULL, NULL, NULL); }

inline struct FindReceiverResponse * soap_new_req_FindReceiverResponse(struct soap *soap) { struct FindReceiverResponse *_p = soap_instantiate_FindReceiverResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_FindReceiverResponse(soap, _p); } return _p; }

inline struct FindReceiverResponse * soap_new_set_FindReceiverResponse(struct soap *soap, std::list<std::wstring >& lstResponse) { struct FindReceiverResponse *_p = soap_instantiate_FindReceiverResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_FindReceiverResponse(soap, _p); _p->lstResponse = lstResponse; } return _p; }

inline void soap_delete_FindReceiverResponse(struct soap *soap, struct FindReceiverResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_FindReceiverResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_frreq__FindReceiverRequest
#define SOAP_TYPE_frreq__FindReceiverRequest (36)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_frreq__FindReceiverRequest(struct soap*, struct frreq__FindReceiverRequest *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_frreq__FindReceiverRequest(struct soap*, const struct frreq__FindReceiverRequest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_frreq__FindReceiverRequest(struct soap*, const char*, int, const struct frreq__FindReceiverRequest *, const char*);
SOAP_FMAC3 struct frreq__FindReceiverRequest * SOAP_FMAC4 soap_in_frreq__FindReceiverRequest(struct soap*, const char*, struct frreq__FindReceiverRequest *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_frreq__FindReceiverRequest(struct soap*, const struct frreq__FindReceiverRequest *, const char*, const char*);

#ifndef soap_write_frreq__FindReceiverRequest
#define soap_write_frreq__FindReceiverRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_frreq__FindReceiverRequest(soap, data),0) || soap_put_frreq__FindReceiverRequest(soap, data, "frreq:FindReceiverRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct frreq__FindReceiverRequest * SOAP_FMAC4 soap_get_frreq__FindReceiverRequest(struct soap*, struct frreq__FindReceiverRequest *, const char*, const char*);

#ifndef soap_read_frreq__FindReceiverRequest
#define soap_read_frreq__FindReceiverRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_frreq__FindReceiverRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct frreq__FindReceiverRequest * SOAP_FMAC2 soap_instantiate_frreq__FindReceiverRequest(struct soap*, int, const char*, const char*, size_t*);

inline struct frreq__FindReceiverRequest * soap_new_frreq__FindReceiverRequest(struct soap *soap, int n = -1) { return soap_instantiate_frreq__FindReceiverRequest(soap, n, NULL, NULL, NULL); }

inline struct frreq__FindReceiverRequest * soap_new_req_frreq__FindReceiverRequest(struct soap *soap, struct FindReceiverRequest& return_) { struct frreq__FindReceiverRequest *_p = soap_instantiate_frreq__FindReceiverRequest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_frreq__FindReceiverRequest(soap, _p); _p->return_ = return_; } return _p; }

inline struct frreq__FindReceiverRequest * soap_new_set_frreq__FindReceiverRequest(struct soap *soap, struct FindReceiverRequest& return_) { struct frreq__FindReceiverRequest *_p = soap_instantiate_frreq__FindReceiverRequest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_frreq__FindReceiverRequest(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_frreq__FindReceiverRequest(struct soap *soap, struct frreq__FindReceiverRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_frreq__FindReceiverRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

/* _frreq_FindReceiverRequest is a typedef element/attribute synonym for FindReceiverRequest */

#ifndef SOAP_TYPE__frreq_FindReceiverRequest
#define SOAP_TYPE__frreq_FindReceiverRequest (35)
#endif

#define soap_default__frreq_FindReceiverRequest(soap, a) soap_default_FindReceiverRequest(soap, a)


#define soap_serialize__frreq_FindReceiverRequest soap_serialize_FindReceiverRequest


#define soap_out__frreq_FindReceiverRequest soap_out_FindReceiverRequest


#define soap_in__frreq_FindReceiverRequest soap_in_FindReceiverRequest


#define soap_put__frreq_FindReceiverRequest soap_put_FindReceiverRequest


#define soap_get__frreq_FindReceiverRequest soap_get_FindReceiverRequest


#define soap_instantiate__frreq_FindReceiverRequest soap_instantiate_FindReceiverRequest


#define soap_copy__frreq_FindReceiverRequest soap_copy_FindReceiverRequest

#ifndef SOAP_TYPE_FindReceiverRequest
#define SOAP_TYPE_FindReceiverRequest (34)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_FindReceiverRequest(struct soap*, struct FindReceiverRequest *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_FindReceiverRequest(struct soap*, const struct FindReceiverRequest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_FindReceiverRequest(struct soap*, const char*, int, const struct FindReceiverRequest *, const char*);
SOAP_FMAC3 struct FindReceiverRequest * SOAP_FMAC4 soap_in_FindReceiverRequest(struct soap*, const char*, struct FindReceiverRequest *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_FindReceiverRequest(struct soap*, const struct FindReceiverRequest *, const char*, const char*);

#ifndef soap_write_FindReceiverRequest
#define soap_write_FindReceiverRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_FindReceiverRequest(soap, data),0) || soap_put_FindReceiverRequest(soap, data, "FindReceiverRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct FindReceiverRequest * SOAP_FMAC4 soap_get_FindReceiverRequest(struct soap*, struct FindReceiverRequest *, const char*, const char*);

#ifndef soap_read_FindReceiverRequest
#define soap_read_FindReceiverRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_FindReceiverRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct FindReceiverRequest * SOAP_FMAC2 soap_instantiate_FindReceiverRequest(struct soap*, int, const char*, const char*, size_t*);

inline struct FindReceiverRequest * soap_new_FindReceiverRequest(struct soap *soap, int n = -1) { return soap_instantiate_FindReceiverRequest(soap, n, NULL, NULL, NULL); }

inline struct FindReceiverRequest * soap_new_req_FindReceiverRequest(struct soap *soap, bool bDummy) { struct FindReceiverRequest *_p = soap_instantiate_FindReceiverRequest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_FindReceiverRequest(soap, _p); _p->bDummy = bDummy; } return _p; }

inline struct FindReceiverRequest * soap_new_set_FindReceiverRequest(struct soap *soap, bool bDummy) { struct FindReceiverRequest *_p = soap_instantiate_FindReceiverRequest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_FindReceiverRequest(soap, _p); _p->bDummy = bDummy; } return _p; }

inline void soap_delete_FindReceiverRequest(struct soap *soap, struct FindReceiverRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_FindReceiverRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_rres__RefreshResponse
#define SOAP_TYPE_rres__RefreshResponse (33)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_rres__RefreshResponse(struct soap*, struct rres__RefreshResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_rres__RefreshResponse(struct soap*, const struct rres__RefreshResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_rres__RefreshResponse(struct soap*, const char*, int, const struct rres__RefreshResponse *, const char*);
SOAP_FMAC3 struct rres__RefreshResponse * SOAP_FMAC4 soap_in_rres__RefreshResponse(struct soap*, const char*, struct rres__RefreshResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_rres__RefreshResponse(struct soap*, const struct rres__RefreshResponse *, const char*, const char*);

#ifndef soap_write_rres__RefreshResponse
#define soap_write_rres__RefreshResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_rres__RefreshResponse(soap, data),0) || soap_put_rres__RefreshResponse(soap, data, "rres:RefreshResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct rres__RefreshResponse * SOAP_FMAC4 soap_get_rres__RefreshResponse(struct soap*, struct rres__RefreshResponse *, const char*, const char*);

#ifndef soap_read_rres__RefreshResponse
#define soap_read_rres__RefreshResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_rres__RefreshResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct rres__RefreshResponse * SOAP_FMAC2 soap_instantiate_rres__RefreshResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct rres__RefreshResponse * soap_new_rres__RefreshResponse(struct soap *soap, int n = -1) { return soap_instantiate_rres__RefreshResponse(soap, n, NULL, NULL, NULL); }

inline struct rres__RefreshResponse * soap_new_req_rres__RefreshResponse(struct soap *soap, struct RefreshResponse& return_) { struct rres__RefreshResponse *_p = soap_instantiate_rres__RefreshResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_rres__RefreshResponse(soap, _p); _p->return_ = return_; } return _p; }

inline struct rres__RefreshResponse * soap_new_set_rres__RefreshResponse(struct soap *soap, struct RefreshResponse& return_) { struct rres__RefreshResponse *_p = soap_instantiate_rres__RefreshResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_rres__RefreshResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_rres__RefreshResponse(struct soap *soap, struct rres__RefreshResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_rres__RefreshResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

/* _rres_RefreshResponse is a typedef element/attribute synonym for RefreshResponse */

#ifndef SOAP_TYPE__rres_RefreshResponse
#define SOAP_TYPE__rres_RefreshResponse (32)
#endif

#define soap_default__rres_RefreshResponse(soap, a) soap_default_RefreshResponse(soap, a)


#define soap_serialize__rres_RefreshResponse soap_serialize_RefreshResponse


#define soap_out__rres_RefreshResponse soap_out_RefreshResponse


#define soap_in__rres_RefreshResponse soap_in_RefreshResponse


#define soap_put__rres_RefreshResponse soap_put_RefreshResponse


#define soap_get__rres_RefreshResponse soap_get_RefreshResponse


#define soap_instantiate__rres_RefreshResponse soap_instantiate_RefreshResponse


#define soap_copy__rres_RefreshResponse soap_copy_RefreshResponse

#ifndef SOAP_TYPE_RefreshResponse
#define SOAP_TYPE_RefreshResponse (31)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_RefreshResponse(struct soap*, struct RefreshResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_RefreshResponse(struct soap*, const struct RefreshResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_RefreshResponse(struct soap*, const char*, int, const struct RefreshResponse *, const char*);
SOAP_FMAC3 struct RefreshResponse * SOAP_FMAC4 soap_in_RefreshResponse(struct soap*, const char*, struct RefreshResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_RefreshResponse(struct soap*, const struct RefreshResponse *, const char*, const char*);

#ifndef soap_write_RefreshResponse
#define soap_write_RefreshResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_RefreshResponse(soap, data),0) || soap_put_RefreshResponse(soap, data, "RefreshResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct RefreshResponse * SOAP_FMAC4 soap_get_RefreshResponse(struct soap*, struct RefreshResponse *, const char*, const char*);

#ifndef soap_read_RefreshResponse
#define soap_read_RefreshResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_RefreshResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct RefreshResponse * SOAP_FMAC2 soap_instantiate_RefreshResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct RefreshResponse * soap_new_RefreshResponse(struct soap *soap, int n = -1) { return soap_instantiate_RefreshResponse(soap, n, NULL, NULL, NULL); }

inline struct RefreshResponse * soap_new_req_RefreshResponse(struct soap *soap, bool bDummy) { struct RefreshResponse *_p = soap_instantiate_RefreshResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_RefreshResponse(soap, _p); _p->bDummy = bDummy; } return _p; }

inline struct RefreshResponse * soap_new_set_RefreshResponse(struct soap *soap, bool bDummy) { struct RefreshResponse *_p = soap_instantiate_RefreshResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_RefreshResponse(soap, _p); _p->bDummy = bDummy; } return _p; }

inline void soap_delete_RefreshResponse(struct soap *soap, struct RefreshResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_RefreshResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_rreq__RefreshRequest
#define SOAP_TYPE_rreq__RefreshRequest (30)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_rreq__RefreshRequest(struct soap*, struct rreq__RefreshRequest *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_rreq__RefreshRequest(struct soap*, const struct rreq__RefreshRequest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_rreq__RefreshRequest(struct soap*, const char*, int, const struct rreq__RefreshRequest *, const char*);
SOAP_FMAC3 struct rreq__RefreshRequest * SOAP_FMAC4 soap_in_rreq__RefreshRequest(struct soap*, const char*, struct rreq__RefreshRequest *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_rreq__RefreshRequest(struct soap*, const struct rreq__RefreshRequest *, const char*, const char*);

#ifndef soap_write_rreq__RefreshRequest
#define soap_write_rreq__RefreshRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_rreq__RefreshRequest(soap, data),0) || soap_put_rreq__RefreshRequest(soap, data, "rreq:RefreshRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct rreq__RefreshRequest * SOAP_FMAC4 soap_get_rreq__RefreshRequest(struct soap*, struct rreq__RefreshRequest *, const char*, const char*);

#ifndef soap_read_rreq__RefreshRequest
#define soap_read_rreq__RefreshRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_rreq__RefreshRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct rreq__RefreshRequest * SOAP_FMAC2 soap_instantiate_rreq__RefreshRequest(struct soap*, int, const char*, const char*, size_t*);

inline struct rreq__RefreshRequest * soap_new_rreq__RefreshRequest(struct soap *soap, int n = -1) { return soap_instantiate_rreq__RefreshRequest(soap, n, NULL, NULL, NULL); }

inline struct rreq__RefreshRequest * soap_new_req_rreq__RefreshRequest(struct soap *soap, struct RefresRequest& retrun_) { struct rreq__RefreshRequest *_p = soap_instantiate_rreq__RefreshRequest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_rreq__RefreshRequest(soap, _p); _p->retrun_ = retrun_; } return _p; }

inline struct rreq__RefreshRequest * soap_new_set_rreq__RefreshRequest(struct soap *soap, struct RefresRequest& retrun_) { struct rreq__RefreshRequest *_p = soap_instantiate_rreq__RefreshRequest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_rreq__RefreshRequest(soap, _p); _p->retrun_ = retrun_; } return _p; }

inline void soap_delete_rreq__RefreshRequest(struct soap *soap, struct rreq__RefreshRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_rreq__RefreshRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

/* _rreq_RefresRequest is a typedef element/attribute synonym for RefresRequest */

#ifndef SOAP_TYPE__rreq_RefresRequest
#define SOAP_TYPE__rreq_RefresRequest (29)
#endif

#define soap_default__rreq_RefresRequest(soap, a) soap_default_RefresRequest(soap, a)


#define soap_serialize__rreq_RefresRequest soap_serialize_RefresRequest


#define soap_out__rreq_RefresRequest soap_out_RefresRequest


#define soap_in__rreq_RefresRequest soap_in_RefresRequest


#define soap_put__rreq_RefresRequest soap_put_RefresRequest


#define soap_get__rreq_RefresRequest soap_get_RefresRequest


#define soap_instantiate__rreq_RefresRequest soap_instantiate_RefresRequest


#define soap_copy__rreq_RefresRequest soap_copy_RefresRequest

#ifndef SOAP_TYPE_RefresRequest
#define SOAP_TYPE_RefresRequest (28)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_RefresRequest(struct soap*, struct RefresRequest *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_RefresRequest(struct soap*, const struct RefresRequest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_RefresRequest(struct soap*, const char*, int, const struct RefresRequest *, const char*);
SOAP_FMAC3 struct RefresRequest * SOAP_FMAC4 soap_in_RefresRequest(struct soap*, const char*, struct RefresRequest *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_RefresRequest(struct soap*, const struct RefresRequest *, const char*, const char*);

#ifndef soap_write_RefresRequest
#define soap_write_RefresRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_RefresRequest(soap, data),0) || soap_put_RefresRequest(soap, data, "RefresRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct RefresRequest * SOAP_FMAC4 soap_get_RefresRequest(struct soap*, struct RefresRequest *, const char*, const char*);

#ifndef soap_read_RefresRequest
#define soap_read_RefresRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_RefresRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct RefresRequest * SOAP_FMAC2 soap_instantiate_RefresRequest(struct soap*, int, const char*, const char*, size_t*);

inline struct RefresRequest * soap_new_RefresRequest(struct soap *soap, int n = -1) { return soap_instantiate_RefresRequest(soap, n, NULL, NULL, NULL); }

inline struct RefresRequest * soap_new_req_RefresRequest(struct soap *soap, int nInterval) { struct RefresRequest *_p = soap_instantiate_RefresRequest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_RefresRequest(soap, _p); _p->nInterval = nInterval; } return _p; }

inline struct RefresRequest * soap_new_set_RefresRequest(struct soap *soap, int nInterval) { struct RefresRequest *_p = soap_instantiate_RefresRequest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_RefresRequest(soap, _p); _p->nInterval = nInterval; } return _p; }

inline void soap_delete_RefresRequest(struct soap *soap, struct RefresRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_RefresRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_rres__CReadResponse
#define SOAP_TYPE_rres__CReadResponse (27)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_rres__CReadResponse(struct soap*, struct rres__CReadResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_rres__CReadResponse(struct soap*, const struct rres__CReadResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_rres__CReadResponse(struct soap*, const char*, int, const struct rres__CReadResponse *, const char*);
SOAP_FMAC3 struct rres__CReadResponse * SOAP_FMAC4 soap_in_rres__CReadResponse(struct soap*, const char*, struct rres__CReadResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_rres__CReadResponse(struct soap*, const struct rres__CReadResponse *, const char*, const char*);

#ifndef soap_write_rres__CReadResponse
#define soap_write_rres__CReadResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_rres__CReadResponse(soap, data),0) || soap_put_rres__CReadResponse(soap, data, "rres:CReadResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct rres__CReadResponse * SOAP_FMAC4 soap_get_rres__CReadResponse(struct soap*, struct rres__CReadResponse *, const char*, const char*);

#ifndef soap_read_rres__CReadResponse
#define soap_read_rres__CReadResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_rres__CReadResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct rres__CReadResponse * SOAP_FMAC2 soap_instantiate_rres__CReadResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct rres__CReadResponse * soap_new_rres__CReadResponse(struct soap *soap, int n = -1) { return soap_instantiate_rres__CReadResponse(soap, n, NULL, NULL, NULL); }

inline struct rres__CReadResponse * soap_new_req_rres__CReadResponse(struct soap *soap, _rres__CReadResponse& return_) { struct rres__CReadResponse *_p = soap_instantiate_rres__CReadResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_rres__CReadResponse(soap, _p); _p->return_ = return_; } return _p; }

inline struct rres__CReadResponse * soap_new_set_rres__CReadResponse(struct soap *soap, _rres__CReadResponse& return_) { struct rres__CReadResponse *_p = soap_instantiate_rres__CReadResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_rres__CReadResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_rres__CReadResponse(struct soap *soap, struct rres__CReadResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_rres__CReadResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_rres__ReadResponse
#define SOAP_TYPE_rres__ReadResponse (24)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_rres__ReadResponse(struct soap*, struct rres__ReadResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_rres__ReadResponse(struct soap*, const struct rres__ReadResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_rres__ReadResponse(struct soap*, const char*, int, const struct rres__ReadResponse *, const char*);
SOAP_FMAC3 struct rres__ReadResponse * SOAP_FMAC4 soap_in_rres__ReadResponse(struct soap*, const char*, struct rres__ReadResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_rres__ReadResponse(struct soap*, const struct rres__ReadResponse *, const char*, const char*);

#ifndef soap_write_rres__ReadResponse
#define soap_write_rres__ReadResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_rres__ReadResponse(soap, data),0) || soap_put_rres__ReadResponse(soap, data, "rres:ReadResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct rres__ReadResponse * SOAP_FMAC4 soap_get_rres__ReadResponse(struct soap*, struct rres__ReadResponse *, const char*, const char*);

#ifndef soap_read_rres__ReadResponse
#define soap_read_rres__ReadResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_rres__ReadResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct rres__ReadResponse * SOAP_FMAC2 soap_instantiate_rres__ReadResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct rres__ReadResponse * soap_new_rres__ReadResponse(struct soap *soap, int n = -1) { return soap_instantiate_rres__ReadResponse(soap, n, NULL, NULL, NULL); }

inline struct rres__ReadResponse * soap_new_req_rres__ReadResponse(struct soap *soap, struct ReadResponse& return_) { struct rres__ReadResponse *_p = soap_instantiate_rres__ReadResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_rres__ReadResponse(soap, _p); _p->return_ = return_; } return _p; }

inline struct rres__ReadResponse * soap_new_set_rres__ReadResponse(struct soap *soap, struct ReadResponse& return_) { struct rres__ReadResponse *_p = soap_instantiate_rres__ReadResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_rres__ReadResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_rres__ReadResponse(struct soap *soap, struct rres__ReadResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_rres__ReadResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

/* _rres__ReadResponse is a typedef element/attribute synonym for ReadResponse */

#ifndef SOAP_TYPE__rres__ReadResponse
#define SOAP_TYPE__rres__ReadResponse (23)
#endif

#define soap_default__rres__ReadResponse(soap, a) soap_default_ReadResponse(soap, a)


#define soap_serialize__rres__ReadResponse soap_serialize_ReadResponse


#define soap_out__rres__ReadResponse soap_out_ReadResponse


#define soap_in__rres__ReadResponse soap_in_ReadResponse


#define soap_put__rres__ReadResponse soap_put_ReadResponse


#define soap_get__rres__ReadResponse soap_get_ReadResponse


#define soap_instantiate__rres__ReadResponse soap_instantiate_ReadResponse


#define soap_copy__rres__ReadResponse soap_copy_ReadResponse

#ifndef SOAP_TYPE_ReadResponse
#define SOAP_TYPE_ReadResponse (22)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ReadResponse(struct soap*, struct ReadResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ReadResponse(struct soap*, const struct ReadResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ReadResponse(struct soap*, const char*, int, const struct ReadResponse *, const char*);
SOAP_FMAC3 struct ReadResponse * SOAP_FMAC4 soap_in_ReadResponse(struct soap*, const char*, struct ReadResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ReadResponse(struct soap*, const struct ReadResponse *, const char*, const char*);

#ifndef soap_write_ReadResponse
#define soap_write_ReadResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ReadResponse(soap, data),0) || soap_put_ReadResponse(soap, data, "ReadResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ReadResponse * SOAP_FMAC4 soap_get_ReadResponse(struct soap*, struct ReadResponse *, const char*, const char*);

#ifndef soap_read_ReadResponse
#define soap_read_ReadResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ReadResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ReadResponse * SOAP_FMAC2 soap_instantiate_ReadResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ReadResponse * soap_new_ReadResponse(struct soap *soap, int n = -1) { return soap_instantiate_ReadResponse(soap, n, NULL, NULL, NULL); }

inline struct ReadResponse * soap_new_req_ReadResponse(struct soap *soap, std::wstring& strCallingAETtile, std::wstring& strCalledAETitle, std::wstring& strPatientID, std::wstring& strPatientName, std::wstring& strProtocol, std::wstring& strSOPClassName, int nNumOfInstance, enum Processing eStatus) { struct ReadResponse *_p = soap_instantiate_ReadResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ReadResponse(soap, _p); _p->strCallingAETtile = strCallingAETtile; _p->strCalledAETitle = strCalledAETitle; _p->strPatientID = strPatientID; _p->strPatientName = strPatientName; _p->strProtocol = strProtocol; _p->strSOPClassName = strSOPClassName; _p->nNumOfInstance = nNumOfInstance; _p->eStatus = eStatus; } return _p; }

inline struct ReadResponse * soap_new_set_ReadResponse(struct soap *soap, std::wstring& strCallingAETtile, std::wstring& strCalledAETitle, std::wstring& strPatientID, std::wstring& strPatientName, std::wstring& strProtocol, std::wstring& strSOPClassName, int nNumOfInstance, enum Processing eStatus) { struct ReadResponse *_p = soap_instantiate_ReadResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ReadResponse(soap, _p); _p->strCallingAETtile = strCallingAETtile; _p->strCalledAETitle = strCalledAETitle; _p->strPatientID = strPatientID; _p->strPatientName = strPatientName; _p->strProtocol = strProtocol; _p->strSOPClassName = strSOPClassName; _p->nNumOfInstance = nNumOfInstance; _p->eStatus = eStatus; } return _p; }

inline void soap_delete_ReadResponse(struct soap *soap, struct ReadResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ReadResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_rreq__ReadRequest
#define SOAP_TYPE_rreq__ReadRequest (21)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_rreq__ReadRequest(struct soap*, struct rreq__ReadRequest *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_rreq__ReadRequest(struct soap*, const struct rreq__ReadRequest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_rreq__ReadRequest(struct soap*, const char*, int, const struct rreq__ReadRequest *, const char*);
SOAP_FMAC3 struct rreq__ReadRequest * SOAP_FMAC4 soap_in_rreq__ReadRequest(struct soap*, const char*, struct rreq__ReadRequest *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_rreq__ReadRequest(struct soap*, const struct rreq__ReadRequest *, const char*, const char*);

#ifndef soap_write_rreq__ReadRequest
#define soap_write_rreq__ReadRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_rreq__ReadRequest(soap, data),0) || soap_put_rreq__ReadRequest(soap, data, "rreq:ReadRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct rreq__ReadRequest * SOAP_FMAC4 soap_get_rreq__ReadRequest(struct soap*, struct rreq__ReadRequest *, const char*, const char*);

#ifndef soap_read_rreq__ReadRequest
#define soap_read_rreq__ReadRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_rreq__ReadRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct rreq__ReadRequest * SOAP_FMAC2 soap_instantiate_rreq__ReadRequest(struct soap*, int, const char*, const char*, size_t*);

inline struct rreq__ReadRequest * soap_new_rreq__ReadRequest(struct soap *soap, int n = -1) { return soap_instantiate_rreq__ReadRequest(soap, n, NULL, NULL, NULL); }

inline struct rreq__ReadRequest * soap_new_req_rreq__ReadRequest(struct soap *soap, struct ReadRequest& return_) { struct rreq__ReadRequest *_p = soap_instantiate_rreq__ReadRequest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_rreq__ReadRequest(soap, _p); _p->return_ = return_; } return _p; }

inline struct rreq__ReadRequest * soap_new_set_rreq__ReadRequest(struct soap *soap, struct ReadRequest& return_) { struct rreq__ReadRequest *_p = soap_instantiate_rreq__ReadRequest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_rreq__ReadRequest(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_rreq__ReadRequest(struct soap *soap, struct rreq__ReadRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_rreq__ReadRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

/* _rreq__ReadRequest is a typedef element/attribute synonym for ReadRequest */

#ifndef SOAP_TYPE__rreq__ReadRequest
#define SOAP_TYPE__rreq__ReadRequest (20)
#endif

#define soap_default__rreq__ReadRequest(soap, a) soap_default_ReadRequest(soap, a)


#define soap_serialize__rreq__ReadRequest soap_serialize_ReadRequest


#define soap_out__rreq__ReadRequest soap_out_ReadRequest


#define soap_in__rreq__ReadRequest soap_in_ReadRequest


#define soap_put__rreq__ReadRequest soap_put_ReadRequest


#define soap_get__rreq__ReadRequest soap_get_ReadRequest


#define soap_instantiate__rreq__ReadRequest soap_instantiate_ReadRequest


#define soap_copy__rreq__ReadRequest soap_copy_ReadRequest

#ifndef SOAP_TYPE_ReadRequest
#define SOAP_TYPE_ReadRequest (19)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ReadRequest(struct soap*, struct ReadRequest *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ReadRequest(struct soap*, const struct ReadRequest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ReadRequest(struct soap*, const char*, int, const struct ReadRequest *, const char*);
SOAP_FMAC3 struct ReadRequest * SOAP_FMAC4 soap_in_ReadRequest(struct soap*, const char*, struct ReadRequest *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ReadRequest(struct soap*, const struct ReadRequest *, const char*, const char*);

#ifndef soap_write_ReadRequest
#define soap_write_ReadRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ReadRequest(soap, data),0) || soap_put_ReadRequest(soap, data, "ReadRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ReadRequest * SOAP_FMAC4 soap_get_ReadRequest(struct soap*, struct ReadRequest *, const char*, const char*);

#ifndef soap_read_ReadRequest
#define soap_read_ReadRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_ReadRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ReadRequest * SOAP_FMAC2 soap_instantiate_ReadRequest(struct soap*, int, const char*, const char*, size_t*);

inline struct ReadRequest * soap_new_ReadRequest(struct soap *soap, int n = -1) { return soap_instantiate_ReadRequest(soap, n, NULL, NULL, NULL); }

inline struct ReadRequest * soap_new_req_ReadRequest(struct soap *soap, bool bDummy) { struct ReadRequest *_p = soap_instantiate_ReadRequest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ReadRequest(soap, _p); _p->bDummy = bDummy; } return _p; }

inline struct ReadRequest * soap_new_set_ReadRequest(struct soap *soap, bool bDummy) { struct ReadRequest *_p = soap_instantiate_ReadRequest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ReadRequest(soap, _p); _p->bDummy = bDummy; } return _p; }

inline void soap_delete_ReadRequest(struct soap *soap, struct ReadRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ReadRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wres__WriteResponse
#define SOAP_TYPE_wres__WriteResponse (18)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wres__WriteResponse(struct soap*, struct wres__WriteResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wres__WriteResponse(struct soap*, const struct wres__WriteResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wres__WriteResponse(struct soap*, const char*, int, const struct wres__WriteResponse *, const char*);
SOAP_FMAC3 struct wres__WriteResponse * SOAP_FMAC4 soap_in_wres__WriteResponse(struct soap*, const char*, struct wres__WriteResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wres__WriteResponse(struct soap*, const struct wres__WriteResponse *, const char*, const char*);

#ifndef soap_write_wres__WriteResponse
#define soap_write_wres__WriteResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_wres__WriteResponse(soap, data),0) || soap_put_wres__WriteResponse(soap, data, "wres:WriteResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct wres__WriteResponse * SOAP_FMAC4 soap_get_wres__WriteResponse(struct soap*, struct wres__WriteResponse *, const char*, const char*);

#ifndef soap_read_wres__WriteResponse
#define soap_read_wres__WriteResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_wres__WriteResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct wres__WriteResponse * SOAP_FMAC2 soap_instantiate_wres__WriteResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct wres__WriteResponse * soap_new_wres__WriteResponse(struct soap *soap, int n = -1) { return soap_instantiate_wres__WriteResponse(soap, n, NULL, NULL, NULL); }

inline struct wres__WriteResponse * soap_new_req_wres__WriteResponse(struct soap *soap, struct WriteResponse& return_) { struct wres__WriteResponse *_p = soap_instantiate_wres__WriteResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_wres__WriteResponse(soap, _p); _p->return_ = return_; } return _p; }

inline struct wres__WriteResponse * soap_new_set_wres__WriteResponse(struct soap *soap, struct WriteResponse& return_) { struct wres__WriteResponse *_p = soap_instantiate_wres__WriteResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_wres__WriteResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_wres__WriteResponse(struct soap *soap, struct wres__WriteResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wres__WriteResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

/* _wres__WriteResponse is a typedef element/attribute synonym for WriteResponse */

#ifndef SOAP_TYPE__wres__WriteResponse
#define SOAP_TYPE__wres__WriteResponse (17)
#endif

#define soap_default__wres__WriteResponse(soap, a) soap_default_WriteResponse(soap, a)


#define soap_serialize__wres__WriteResponse soap_serialize_WriteResponse


#define soap_out__wres__WriteResponse soap_out_WriteResponse


#define soap_in__wres__WriteResponse soap_in_WriteResponse


#define soap_put__wres__WriteResponse soap_put_WriteResponse


#define soap_get__wres__WriteResponse soap_get_WriteResponse


#define soap_instantiate__wres__WriteResponse soap_instantiate_WriteResponse


#define soap_copy__wres__WriteResponse soap_copy_WriteResponse

#ifndef SOAP_TYPE_WriteResponse
#define SOAP_TYPE_WriteResponse (15)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_WriteResponse(struct soap*, struct WriteResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_WriteResponse(struct soap*, const struct WriteResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_WriteResponse(struct soap*, const char*, int, const struct WriteResponse *, const char*);
SOAP_FMAC3 struct WriteResponse * SOAP_FMAC4 soap_in_WriteResponse(struct soap*, const char*, struct WriteResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_WriteResponse(struct soap*, const struct WriteResponse *, const char*, const char*);

#ifndef soap_write_WriteResponse
#define soap_write_WriteResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_WriteResponse(soap, data),0) || soap_put_WriteResponse(soap, data, "WriteResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct WriteResponse * SOAP_FMAC4 soap_get_WriteResponse(struct soap*, struct WriteResponse *, const char*, const char*);

#ifndef soap_read_WriteResponse
#define soap_read_WriteResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_WriteResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct WriteResponse * SOAP_FMAC2 soap_instantiate_WriteResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct WriteResponse * soap_new_WriteResponse(struct soap *soap, int n = -1) { return soap_instantiate_WriteResponse(soap, n, NULL, NULL, NULL); }

inline struct WriteResponse * soap_new_req_WriteResponse(struct soap *soap, bool bDummy) { struct WriteResponse *_p = soap_instantiate_WriteResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_WriteResponse(soap, _p); _p->bDummy = bDummy; } return _p; }

inline struct WriteResponse * soap_new_set_WriteResponse(struct soap *soap, bool bDummy) { struct WriteResponse *_p = soap_instantiate_WriteResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_WriteResponse(soap, _p); _p->bDummy = bDummy; } return _p; }

inline void soap_delete_WriteResponse(struct soap *soap, struct WriteResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_WriteResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wreq__WriteRequest
#define SOAP_TYPE_wreq__WriteRequest (14)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wreq__WriteRequest(struct soap*, struct wreq__WriteRequest *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wreq__WriteRequest(struct soap*, const struct wreq__WriteRequest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wreq__WriteRequest(struct soap*, const char*, int, const struct wreq__WriteRequest *, const char*);
SOAP_FMAC3 struct wreq__WriteRequest * SOAP_FMAC4 soap_in_wreq__WriteRequest(struct soap*, const char*, struct wreq__WriteRequest *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wreq__WriteRequest(struct soap*, const struct wreq__WriteRequest *, const char*, const char*);

#ifndef soap_write_wreq__WriteRequest
#define soap_write_wreq__WriteRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_wreq__WriteRequest(soap, data),0) || soap_put_wreq__WriteRequest(soap, data, "wreq:WriteRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct wreq__WriteRequest * SOAP_FMAC4 soap_get_wreq__WriteRequest(struct soap*, struct wreq__WriteRequest *, const char*, const char*);

#ifndef soap_read_wreq__WriteRequest
#define soap_read_wreq__WriteRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_wreq__WriteRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct wreq__WriteRequest * SOAP_FMAC2 soap_instantiate_wreq__WriteRequest(struct soap*, int, const char*, const char*, size_t*);

inline struct wreq__WriteRequest * soap_new_wreq__WriteRequest(struct soap *soap, int n = -1) { return soap_instantiate_wreq__WriteRequest(soap, n, NULL, NULL, NULL); }

inline struct wreq__WriteRequest * soap_new_req_wreq__WriteRequest(struct soap *soap, struct WriteRequest& return_) { struct wreq__WriteRequest *_p = soap_instantiate_wreq__WriteRequest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_wreq__WriteRequest(soap, _p); _p->return_ = return_; } return _p; }

inline struct wreq__WriteRequest * soap_new_set_wreq__WriteRequest(struct soap *soap, struct WriteRequest& return_) { struct wreq__WriteRequest *_p = soap_instantiate_wreq__WriteRequest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_wreq__WriteRequest(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_wreq__WriteRequest(struct soap *soap, struct wreq__WriteRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wreq__WriteRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

/* _wreq__WriteRequest is a typedef element/attribute synonym for WriteRequest */

#ifndef SOAP_TYPE__wreq__WriteRequest
#define SOAP_TYPE__wreq__WriteRequest (13)
#endif

#define soap_default__wreq__WriteRequest(soap, a) soap_default_WriteRequest(soap, a)


#define soap_serialize__wreq__WriteRequest soap_serialize_WriteRequest


#define soap_out__wreq__WriteRequest soap_out_WriteRequest


#define soap_in__wreq__WriteRequest soap_in_WriteRequest


#define soap_put__wreq__WriteRequest soap_put_WriteRequest


#define soap_get__wreq__WriteRequest soap_get_WriteRequest


#define soap_instantiate__wreq__WriteRequest soap_instantiate_WriteRequest


#define soap_copy__wreq__WriteRequest soap_copy_WriteRequest

#ifndef SOAP_TYPE_WriteRequest
#define SOAP_TYPE_WriteRequest (11)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_WriteRequest(struct soap*, struct WriteRequest *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_WriteRequest(struct soap*, const struct WriteRequest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_WriteRequest(struct soap*, const char*, int, const struct WriteRequest *, const char*);
SOAP_FMAC3 struct WriteRequest * SOAP_FMAC4 soap_in_WriteRequest(struct soap*, const char*, struct WriteRequest *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_WriteRequest(struct soap*, const struct WriteRequest *, const char*, const char*);

#ifndef soap_write_WriteRequest
#define soap_write_WriteRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_WriteRequest(soap, data),0) || soap_put_WriteRequest(soap, data, "WriteRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct WriteRequest * SOAP_FMAC4 soap_get_WriteRequest(struct soap*, struct WriteRequest *, const char*, const char*);

#ifndef soap_read_WriteRequest
#define soap_read_WriteRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_WriteRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct WriteRequest * SOAP_FMAC2 soap_instantiate_WriteRequest(struct soap*, int, const char*, const char*, size_t*);

inline struct WriteRequest * soap_new_WriteRequest(struct soap *soap, int n = -1) { return soap_instantiate_WriteRequest(soap, n, NULL, NULL, NULL); }

inline struct WriteRequest * soap_new_req_WriteRequest(struct soap *soap, std::wstring& strCallingAETtile, std::wstring& strCalledAETitle, std::wstring& strPatientID, std::wstring& strPatientName, std::wstring& strProtocol, std::wstring& strSOPClassName, int nNumOfInstance, enum Processing eStatus) { struct WriteRequest *_p = soap_instantiate_WriteRequest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_WriteRequest(soap, _p); _p->strCallingAETtile = strCallingAETtile; _p->strCalledAETitle = strCalledAETitle; _p->strPatientID = strPatientID; _p->strPatientName = strPatientName; _p->strProtocol = strProtocol; _p->strSOPClassName = strSOPClassName; _p->nNumOfInstance = nNumOfInstance; _p->eStatus = eStatus; } return _p; }

inline struct WriteRequest * soap_new_set_WriteRequest(struct soap *soap, std::wstring& strCallingAETtile, std::wstring& strCalledAETitle, std::wstring& strPatientID, std::wstring& strPatientName, std::wstring& strProtocol, std::wstring& strSOPClassName, int nNumOfInstance, enum Processing eStatus) { struct WriteRequest *_p = soap_instantiate_WriteRequest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_WriteRequest(soap, _p); _p->strCallingAETtile = strCallingAETtile; _p->strCalledAETitle = strCalledAETitle; _p->strPatientID = strPatientID; _p->strPatientName = strPatientName; _p->strProtocol = strProtocol; _p->strSOPClassName = strSOPClassName; _p->nNumOfInstance = nNumOfInstance; _p->eStatus = eStatus; } return _p; }

inline void soap_delete_WriteRequest(struct soap *soap, struct WriteRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_WriteRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (106)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Reason(soap, data),0) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (105)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Detail(soap, data),0) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (100)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Code(soap, data),0) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE_PointerTocsres__CommandStationResponse
#define SOAP_TYPE_PointerTocsres__CommandStationResponse (95)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocsres__CommandStationResponse(struct soap*, struct csres__CommandStationResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocsres__CommandStationResponse(struct soap*, const char *, int, struct csres__CommandStationResponse *const*, const char *);
SOAP_FMAC3 struct csres__CommandStationResponse ** SOAP_FMAC4 soap_in_PointerTocsres__CommandStationResponse(struct soap*, const char*, struct csres__CommandStationResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocsres__CommandStationResponse(struct soap*, struct csres__CommandStationResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTocsres__CommandStationResponse
#define soap_write_PointerTocsres__CommandStationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTocsres__CommandStationResponse(soap, data),0) || soap_put_PointerTocsres__CommandStationResponse(soap, data, "csres:CommandStationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct csres__CommandStationResponse ** SOAP_FMAC4 soap_get_PointerTocsres__CommandStationResponse(struct soap*, struct csres__CommandStationResponse **, const char*, const char*);

#ifndef soap_read_PointerTocsres__CommandStationResponse
#define soap_read_PointerTocsres__CommandStationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTocsres__CommandStationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofsres__CFindStationResponse
#define SOAP_TYPE_PointerTofsres__CFindStationResponse (92)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofsres__CFindStationResponse(struct soap*, struct fsres__CFindStationResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofsres__CFindStationResponse(struct soap*, const char *, int, struct fsres__CFindStationResponse *const*, const char *);
SOAP_FMAC3 struct fsres__CFindStationResponse ** SOAP_FMAC4 soap_in_PointerTofsres__CFindStationResponse(struct soap*, const char*, struct fsres__CFindStationResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofsres__CFindStationResponse(struct soap*, struct fsres__CFindStationResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTofsres__CFindStationResponse
#define soap_write_PointerTofsres__CFindStationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofsres__CFindStationResponse(soap, data),0) || soap_put_PointerTofsres__CFindStationResponse(soap, data, "fsres:CFindStationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct fsres__CFindStationResponse ** SOAP_FMAC4 soap_get_PointerTofsres__CFindStationResponse(struct soap*, struct fsres__CFindStationResponse **, const char*, const char*);

#ifndef soap_read_PointerTofsres__CFindStationResponse
#define soap_read_PointerTofsres__CFindStationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofsres__CFindStationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTorlres__CReadLogResponse
#define SOAP_TYPE_PointerTorlres__CReadLogResponse (89)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTorlres__CReadLogResponse(struct soap*, struct rlres__CReadLogResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTorlres__CReadLogResponse(struct soap*, const char *, int, struct rlres__CReadLogResponse *const*, const char *);
SOAP_FMAC3 struct rlres__CReadLogResponse ** SOAP_FMAC4 soap_in_PointerTorlres__CReadLogResponse(struct soap*, const char*, struct rlres__CReadLogResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTorlres__CReadLogResponse(struct soap*, struct rlres__CReadLogResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTorlres__CReadLogResponse
#define soap_write_PointerTorlres__CReadLogResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTorlres__CReadLogResponse(soap, data),0) || soap_put_PointerTorlres__CReadLogResponse(soap, data, "rlres:CReadLogResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct rlres__CReadLogResponse ** SOAP_FMAC4 soap_get_PointerTorlres__CReadLogResponse(struct soap*, struct rlres__CReadLogResponse **, const char*, const char*);

#ifndef soap_read_PointerTorlres__CReadLogResponse
#define soap_read_PointerTorlres__CReadLogResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTorlres__CReadLogResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowlres__WriteLogResponse
#define SOAP_TYPE_PointerTowlres__WriteLogResponse (83)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowlres__WriteLogResponse(struct soap*, struct wlres__WriteLogResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowlres__WriteLogResponse(struct soap*, const char *, int, struct wlres__WriteLogResponse *const*, const char *);
SOAP_FMAC3 struct wlres__WriteLogResponse ** SOAP_FMAC4 soap_in_PointerTowlres__WriteLogResponse(struct soap*, const char*, struct wlres__WriteLogResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowlres__WriteLogResponse(struct soap*, struct wlres__WriteLogResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTowlres__WriteLogResponse
#define soap_write_PointerTowlres__WriteLogResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowlres__WriteLogResponse(soap, data),0) || soap_put_PointerTowlres__WriteLogResponse(soap, data, "wlres:WriteLogResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct wlres__WriteLogResponse ** SOAP_FMAC4 soap_get_PointerTowlres__WriteLogResponse(struct soap*, struct wlres__WriteLogResponse **, const char*, const char*);

#ifndef soap_read_PointerTowlres__WriteLogResponse
#define soap_read_PointerTowlres__WriteLogResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowlres__WriteLogResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofrres__FindReceiverResponse
#define SOAP_TYPE_PointerTofrres__FindReceiverResponse (80)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofrres__FindReceiverResponse(struct soap*, struct frres__FindReceiverResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofrres__FindReceiverResponse(struct soap*, const char *, int, struct frres__FindReceiverResponse *const*, const char *);
SOAP_FMAC3 struct frres__FindReceiverResponse ** SOAP_FMAC4 soap_in_PointerTofrres__FindReceiverResponse(struct soap*, const char*, struct frres__FindReceiverResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofrres__FindReceiverResponse(struct soap*, struct frres__FindReceiverResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTofrres__FindReceiverResponse
#define soap_write_PointerTofrres__FindReceiverResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofrres__FindReceiverResponse(soap, data),0) || soap_put_PointerTofrres__FindReceiverResponse(soap, data, "frres:FindReceiverResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct frres__FindReceiverResponse ** SOAP_FMAC4 soap_get_PointerTofrres__FindReceiverResponse(struct soap*, struct frres__FindReceiverResponse **, const char*, const char*);

#ifndef soap_read_PointerTofrres__FindReceiverResponse
#define soap_read_PointerTofrres__FindReceiverResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofrres__FindReceiverResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTorres__RefreshResponse
#define SOAP_TYPE_PointerTorres__RefreshResponse (77)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTorres__RefreshResponse(struct soap*, struct rres__RefreshResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTorres__RefreshResponse(struct soap*, const char *, int, struct rres__RefreshResponse *const*, const char *);
SOAP_FMAC3 struct rres__RefreshResponse ** SOAP_FMAC4 soap_in_PointerTorres__RefreshResponse(struct soap*, const char*, struct rres__RefreshResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTorres__RefreshResponse(struct soap*, struct rres__RefreshResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTorres__RefreshResponse
#define soap_write_PointerTorres__RefreshResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTorres__RefreshResponse(soap, data),0) || soap_put_PointerTorres__RefreshResponse(soap, data, "rres:RefreshResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct rres__RefreshResponse ** SOAP_FMAC4 soap_get_PointerTorres__RefreshResponse(struct soap*, struct rres__RefreshResponse **, const char*, const char*);

#ifndef soap_read_PointerTorres__RefreshResponse
#define soap_read_PointerTorres__RefreshResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTorres__RefreshResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTorres__CReadResponse
#define SOAP_TYPE_PointerTorres__CReadResponse (74)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTorres__CReadResponse(struct soap*, struct rres__CReadResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTorres__CReadResponse(struct soap*, const char *, int, struct rres__CReadResponse *const*, const char *);
SOAP_FMAC3 struct rres__CReadResponse ** SOAP_FMAC4 soap_in_PointerTorres__CReadResponse(struct soap*, const char*, struct rres__CReadResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTorres__CReadResponse(struct soap*, struct rres__CReadResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTorres__CReadResponse
#define soap_write_PointerTorres__CReadResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTorres__CReadResponse(soap, data),0) || soap_put_PointerTorres__CReadResponse(soap, data, "rres:CReadResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct rres__CReadResponse ** SOAP_FMAC4 soap_get_PointerTorres__CReadResponse(struct soap*, struct rres__CReadResponse **, const char*, const char*);

#ifndef soap_read_PointerTorres__CReadResponse
#define soap_read_PointerTorres__CReadResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTorres__CReadResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowres__WriteResponse
#define SOAP_TYPE_PointerTowres__WriteResponse (71)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowres__WriteResponse(struct soap*, struct wres__WriteResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowres__WriteResponse(struct soap*, const char *, int, struct wres__WriteResponse *const*, const char *);
SOAP_FMAC3 struct wres__WriteResponse ** SOAP_FMAC4 soap_in_PointerTowres__WriteResponse(struct soap*, const char*, struct wres__WriteResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowres__WriteResponse(struct soap*, struct wres__WriteResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTowres__WriteResponse
#define soap_write_PointerTowres__WriteResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowres__WriteResponse(soap, data),0) || soap_put_PointerTowres__WriteResponse(soap, data, "wres:WriteResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct wres__WriteResponse ** SOAP_FMAC4 soap_get_PointerTowres__WriteResponse(struct soap*, struct wres__WriteResponse **, const char*, const char*);

#ifndef soap_read_PointerTowres__WriteResponse
#define soap_read_PointerTowres__WriteResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowres__WriteResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__QName(soap, data),0) || soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_string(soap, data),0) || soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_std__listTemplateOf_fsres_FindStationResponse
#define SOAP_TYPE_std__listTemplateOf_fsres_FindStationResponse (61)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__listTemplateOf_fsres_FindStationResponse(struct soap*, std::list<struct FindStationResponse >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__listTemplateOf_fsres_FindStationResponse(struct soap*, const std::list<struct FindStationResponse >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__listTemplateOf_fsres_FindStationResponse(struct soap*, const char*, int, const std::list<struct FindStationResponse >*, const char*);
SOAP_FMAC3 std::list<struct FindStationResponse >* SOAP_FMAC4 soap_in_std__listTemplateOf_fsres_FindStationResponse(struct soap*, const char*, std::list<struct FindStationResponse >*, const char*);
SOAP_FMAC1 std::list<struct FindStationResponse > * SOAP_FMAC2 soap_instantiate_std__listTemplateOf_fsres_FindStationResponse(struct soap*, int, const char*, const char*, size_t*);

inline std::list<struct FindStationResponse > * soap_new_std__listTemplateOf_fsres_FindStationResponse(struct soap *soap, int n = -1) { return soap_instantiate_std__listTemplateOf_fsres_FindStationResponse(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__listTemplateOf_fsres_FindStationResponse(struct soap *soap, std::list<struct FindStationResponse >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__listTemplateOf_fsres_FindStationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__listTemplateOf_rlres_ReadLogResponse
#define SOAP_TYPE_std__listTemplateOf_rlres_ReadLogResponse (53)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__listTemplateOf_rlres_ReadLogResponse(struct soap*, std::list<struct ReadLogResponse >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__listTemplateOf_rlres_ReadLogResponse(struct soap*, const std::list<struct ReadLogResponse >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__listTemplateOf_rlres_ReadLogResponse(struct soap*, const char*, int, const std::list<struct ReadLogResponse >*, const char*);
SOAP_FMAC3 std::list<struct ReadLogResponse >* SOAP_FMAC4 soap_in_std__listTemplateOf_rlres_ReadLogResponse(struct soap*, const char*, std::list<struct ReadLogResponse >*, const char*);
SOAP_FMAC1 std::list<struct ReadLogResponse > * SOAP_FMAC2 soap_instantiate_std__listTemplateOf_rlres_ReadLogResponse(struct soap*, int, const char*, const char*, size_t*);

inline std::list<struct ReadLogResponse > * soap_new_std__listTemplateOf_rlres_ReadLogResponse(struct soap *soap, int n = -1) { return soap_instantiate_std__listTemplateOf_rlres_ReadLogResponse(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__listTemplateOf_rlres_ReadLogResponse(struct soap *soap, std::list<struct ReadLogResponse >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__listTemplateOf_rlres_ReadLogResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__listTemplateOfstd__wstring
#define SOAP_TYPE_std__listTemplateOfstd__wstring (38)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__listTemplateOfstd__wstring(struct soap*, std::list<std::wstring >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__listTemplateOfstd__wstring(struct soap*, const std::list<std::wstring >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__listTemplateOfstd__wstring(struct soap*, const char*, int, const std::list<std::wstring >*, const char*);
SOAP_FMAC3 std::list<std::wstring >* SOAP_FMAC4 soap_in_std__listTemplateOfstd__wstring(struct soap*, const char*, std::list<std::wstring >*, const char*);
SOAP_FMAC1 std::list<std::wstring > * SOAP_FMAC2 soap_instantiate_std__listTemplateOfstd__wstring(struct soap*, int, const char*, const char*, size_t*);

inline std::list<std::wstring > * soap_new_std__listTemplateOfstd__wstring(struct soap *soap, int n = -1) { return soap_instantiate_std__listTemplateOfstd__wstring(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__listTemplateOfstd__wstring(struct soap *soap, std::list<std::wstring >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__listTemplateOfstd__wstring(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__listTemplateOf_rres__ReadResponse
#define SOAP_TYPE_std__listTemplateOf_rres__ReadResponse (26)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__listTemplateOf_rres__ReadResponse(struct soap*, std::list<struct ReadResponse >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__listTemplateOf_rres__ReadResponse(struct soap*, const std::list<struct ReadResponse >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__listTemplateOf_rres__ReadResponse(struct soap*, const char*, int, const std::list<struct ReadResponse >*, const char*);
SOAP_FMAC3 std::list<struct ReadResponse >* SOAP_FMAC4 soap_in_std__listTemplateOf_rres__ReadResponse(struct soap*, const char*, std::list<struct ReadResponse >*, const char*);
SOAP_FMAC1 std::list<struct ReadResponse > * SOAP_FMAC2 soap_instantiate_std__listTemplateOf_rres__ReadResponse(struct soap*, int, const char*, const char*, size_t*);

inline std::list<struct ReadResponse > * soap_new_std__listTemplateOf_rres__ReadResponse(struct soap *soap, int n = -1) { return soap_instantiate_std__listTemplateOf_rres__ReadResponse(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__listTemplateOf_rres__ReadResponse(struct soap *soap, std::list<struct ReadResponse >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__listTemplateOf_rres__ReadResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

/* End of soapH.h */

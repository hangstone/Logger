/* soapProxy.h
   Generated by gSOAP 2.8.17r from Markisa.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapProxy_H
#define soapProxy_H
#include "soapH.h"

class SOAP_CMAC Proxy : public soap
{ public:
	/// Endpoint URL of service 'Proxy' (change as needed)
	const char *soap_endpoint;
	/// Constructor
	Proxy();
	/// Construct from another engine state
	Proxy(const struct soap&);
	/// Constructor with endpoint URL
	Proxy(const char *url);
	/// Constructor with engine input+output mode control
	Proxy(soap_mode iomode);
	/// Constructor with URL and input+output mode control
	Proxy(const char *url, soap_mode iomode);
	/// Constructor with engine input and output mode control
	Proxy(soap_mode imode, soap_mode omode);
	/// Destructor frees deserialized data
	virtual	~Proxy();
	/// Initializer used by constructors
	virtual	void Proxy_init(soap_mode imode, soap_mode omode);
	/// Delete all deserialized data (with soap_destroy and soap_end)
	virtual	void destroy();
	/// Delete all deserialized data and reset to default
	virtual	void reset();
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Get SOAP Header structure (NULL when absent)
	virtual	const SOAP_ENV__Header *soap_header();
	/// Get SOAP Fault structure (NULL when absent)
	virtual	const SOAP_ENV__Fault *soap_fault();
	/// Get SOAP Fault string (NULL when absent)
	virtual	const char *soap_fault_string();
	/// Get SOAP Fault detail as string (NULL when absent)
	virtual	const char *soap_fault_detail();
	/// Close connection (normally automatic, except for send_X ops)
	virtual	int soap_close_socket();
	/// Force close connection (can kill a thread blocked on IO)
	virtual	int soap_force_close_socket();
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
#ifndef WITH_COMPAT
	virtual	void soap_stream_fault(std::ostream&);
#endif

	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif

	/// Web service operation 'WriteRequest' (returns error code or SOAP_OK)
	virtual	int WriteRequest(struct wreq__WriteRequest stReqMsg, struct wres__WriteResponse *stRspMsg) { return this->WriteRequest(NULL, NULL, stReqMsg, stRspMsg); }
	virtual	int WriteRequest(const char *endpoint, const char *soap_action, struct wreq__WriteRequest stReqMsg, struct wres__WriteResponse *stRspMsg);

	/// Web service operation 'ReadRequest' (returns error code or SOAP_OK)
	virtual	int ReadRequest(struct rreq__ReadRequest stReqMsg, struct rres__CReadResponse *stRspMsg) { return this->ReadRequest(NULL, NULL, stReqMsg, stRspMsg); }
	virtual	int ReadRequest(const char *endpoint, const char *soap_action, struct rreq__ReadRequest stReqMsg, struct rres__CReadResponse *stRspMsg);

	/// Web service operation 'RefreshRequest' (returns error code or SOAP_OK)
	virtual	int RefreshRequest(struct rreq__RefreshRequest stReqMsg, struct rres__RefreshResponse *stRspMsg) { return this->RefreshRequest(NULL, NULL, stReqMsg, stRspMsg); }
	virtual	int RefreshRequest(const char *endpoint, const char *soap_action, struct rreq__RefreshRequest stReqMsg, struct rres__RefreshResponse *stRspMsg);

	/// Web service operation 'FindReceiver' (returns error code or SOAP_OK)
	virtual	int FindReceiver(struct frreq__FindReceiverRequest stReqMsg, struct frres__FindReceiverResponse *stRspMsg) { return this->FindReceiver(NULL, NULL, stReqMsg, stRspMsg); }
	virtual	int FindReceiver(const char *endpoint, const char *soap_action, struct frreq__FindReceiverRequest stReqMsg, struct frres__FindReceiverResponse *stRspMsg);

	/// Web service operation 'WriteLog' (returns error code or SOAP_OK)
	virtual	int WriteLog(struct wlreq__WriteLogRequest stReqMsg, struct wlres__WriteLogResponse *stRspMsg) { return this->WriteLog(NULL, NULL, stReqMsg, stRspMsg); }
	virtual	int WriteLog(const char *endpoint, const char *soap_action, struct wlreq__WriteLogRequest stReqMsg, struct wlres__WriteLogResponse *stRspMsg);

	/// Web service one-way send operation 'send_WriteLogAsync' (returns error code or SOAP_OK)
	virtual	int send_WriteLogAsync(struct wlreq__WriteLogRequest stReqMsg) { return this->send_WriteLogAsync(NULL, NULL, stReqMsg); }
	virtual	int send_WriteLogAsync(const char *endpoint, const char *soap_action, struct wlreq__WriteLogRequest stReqMsg);
	/// Web service one-way receive operation 'recv_WriteLogAsync' (returns error code or SOAP_OK);
	virtual	int recv_WriteLogAsync(struct hangpacs__WriteLogAsync&);
	/// Web service receive of HTTP Accept acknowledgment for one-way send operation 'send_WriteLogAsync' (returns error code or SOAP_OK)
	virtual	int recv_WriteLogAsync_empty_response() { return soap_recv_empty_response(this); }
	/// Web service one-way synchronous send operation 'WriteLogAsync' with HTTP Accept/OK response receive (returns error code or SOAP_OK)
	virtual	int WriteLogAsync(struct wlreq__WriteLogRequest stReqMsg) { return this->WriteLogAsync(NULL, NULL, stReqMsg); }
	virtual	int WriteLogAsync(const char *endpoint, const char *soap_action, struct wlreq__WriteLogRequest stReqMsg) { if (this->send_WriteLogAsync(endpoint, soap_action, stReqMsg) || soap_recv_empty_response(this)) return this->error; return SOAP_OK; }

	/// Web service operation 'ReadLog' (returns error code or SOAP_OK)
	virtual	int ReadLog(struct rlreq__ReadLogRequest stReqMsg, struct rlres__CReadLogResponse *stRspMsg) { return this->ReadLog(NULL, NULL, stReqMsg, stRspMsg); }
	virtual	int ReadLog(const char *endpoint, const char *soap_action, struct rlreq__ReadLogRequest stReqMsg, struct rlres__CReadLogResponse *stRspMsg);
};
#endif
